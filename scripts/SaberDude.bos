#define TAK			// This is a TAK script

#include "STANDARD_COMMANDS_GPL.h"

piece  torso, flare, sword_trigger, blockemit, pelvis, rthigh, lthigh, lleg, rleg, rfoot, 
		lfoot, luparm, lloarm, ground, gun, ruparm, rloarm, head;

static-var bAiming, swinging, last_pos, stunned, bMoving, run_speed, walk_speed, prone_speed, DEATH_SPEED, PickDeath, InAimStance, oldHealth, blocked;

#define SIG_AIM1           2
#define SIG_AIM2			4 
#define BLOCKNOW			8 //signal to kill attack animations when the unit detects that it needs to block
#define HIT					16 //stop trying to block because something damaged him during the block
#define STRIKESTOP			32 //the signal that kills the attack animations when the successful block notice is given by the trigger weapon

#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define RIFLE_MUZZLEFLASH 1024+7

#define saber 2048+4
#define saber_notify1 2048+2
#define block 2048+1

//weapon IDs for triggering weapons - these tell the defending unit when and how to block
#define Strike1Trigger	42 
#define Strike2Trigger	43
#define BlockedTrigger	41

#define CombatDelay 10000 //how long the saber stays active for
#define blockstun	1500	//how long the attacking unit is stunned after having an attack blocked
#define weaponreadydelay 1000
WeaponReady() //attentshaun!
{
	set-signal-mask BLOCKNOW;		
	show gun;
	turn pelvis to y-axis <0> speed <200>;
    turn ruparm to x-axis <-30> speed <200>;
    turn ruparm to y-axis <30> speed <200>;
    turn ruparm to z-axis <0> speed <200>;
    
	turn rloarm to x-axis <-80> speed <200>;
	turn rloarm to y-axis <0> speed <200>;
	turn rloarm to z-axis <0> speed <200>;
    
	turn luparm to x-axis <-30> speed <200>;
	turn luparm to y-axis <-30> speed <200>;
	turn luparm to z-axis <0> speed <200>;
    
	turn lloarm to x-axis <-80> speed <200>;
	turn lloarm to y-axis <0> speed <200>;
	turn lloarm to z-axis <0> speed <200>;
    
	turn gun to x-axis <-40> speed <200>;
	turn gun to y-axis <0.000000> speed <200>;
	turn gun to z-axis <0.000000> speed <200>;
	turn head to y-axis <0.000000> speed <200>;
	turn head to x-axis <0.000000> speed <200>;
	turn head to z-axis <0.000000> speed <200>;
	/*
	wait-for-turn ruparm around x-axis;
	wait-for-turn ruparm around y-axis;
	wait-for-turn ruparm around z-axis;
	wait-for-turn rloarm around x-axis;
	wait-for-turn rloarm around y-axis;
	wait-for-turn rloarm around z-axis;
	
	wait-for-turn luparm around x-axis;
	wait-for-turn luparm around y-axis;
	wait-for-turn luparm around z-axis;
	wait-for-turn lloarm around x-axis;
	wait-for-turn lloarm around y-axis;
	wait-for-turn lloarm around z-axis;
	
	wait-for-turn gun around x-axis;
	wait-for-turn gun around y-axis;
	wait-for-turn gun around z-axis;*/
	sleep weaponreadydelay;
	swinging=0;	
	stunned=0;
	blocked=0;
}


Run()
{
	while (1)
		{
			
			if (bMoving==1)
			{
			InAimStance=0;
			Turn lthigh to z-axis <0> speed <120>*PRONE_SPEED; 	
			turn lleg to z-axis <0> speed <120>*PRONE_SPEED;
			turn lleg to y-axis <0> speed <120>*PRONE_SPEED;
			turn rleg to z-axis <0> speed <120>*PRONE_SPEED;
			turn rleg to y-axis <0> speed <120>*PRONE_SPEED;
			turn rthigh to y-axis <0> speed <120>*PRONE_SPEED;						
			Turn rthigh to z-axis <0> speed <120>*PRONE_SPEED;
			Turn lthigh to z-axis <0> speed <120>*PRONE_SPEED;
			turn lthigh to y-axis <0> speed <120>*PRONE_SPEED;
			call-script WeaponReady();	
			turn pelvis to y-axis <0> speed <40>*RUN_SPEED;
			turn pelvis to x-axis <4> speed <40>*RUN_SPEED;
			turn torso to x-axis <4> speed <40>*RUN_SPEED;
			
					if (InAimStance==0)
					{
				move pelvis to y-axis [0.0] speed <100>*RUN_SPEED;
					}
			}
			
				if (bMoving==1)
			{
			Turn rleg to x-axis <85> speed<30>*WALK_SPEED;	
			Turn lleg to x-axis <55> speed<40>*WALK_SPEED;
			Turn rthigh to x-axis <-60> speed<20>*WALK_SPEED;
			Turn lthigh to x-axis <20> speed<20>*WALK_SPEED;			
		wait-for-move pelvis along y-axis;
				if (InAimStance==0)
					{
			move pelvis to y-axis [1.25] speed <100>*RUN_SPEED;
					}
			}
			
				if (bMoving==1)
			{
			Turn rleg to x-axis <45> speed<60>*WALK_SPEED;
		wait-for-turn lthigh around x-axis;
				if (InAimStance==0)
					{
				move pelvis to y-axis [0.0] speed <100>*RUN_SPEED;
					}
			Turn lleg to x-axis <85> speed<30>*WALK_SPEED;
			Turn rleg to x-axis <55> speed<40>*WALK_SPEED;
			Turn lthigh to x-axis <-60> speed<20>*WALK_SPEED;
			}
			
				if (bMoving==1)
			{
			Turn rthigh to x-axis <20> speed<20>*WALK_SPEED;
		wait-for-move pelvis along y-axis;
		if (InAimStance==0)
			{
			move pelvis to y-axis [1.25] speed <100>*RUN_SPEED;
			}
			Turn lleg to x-axis <45> speed<60>*WALK_SPEED;	
		wait-for-turn rthigh around x-axis;
			}
			
			if (bMoving==0)
			{
			move pelvis to y-axis [0.0] speed <100>*RUN_SPEED;
			turn pelvis to x-axis <0> speed <10>*RUN_SPEED;
			wait-for-turn rthigh around x-axis;
			turn rthigh to x-axis <0> speed <100>*RUN_SPEED;
			wait-for-turn lthigh around x-axis;
			turn lthigh to x-axis <0> speed <100>*RUN_SPEED;
			turn lleg to x-axis <0> speed <100>*RUN_SPEED;
			turn rleg to x-axis <0> speed <100>*RUN_SPEED;
			}
			
					if (bMoving==0)
			{
			sleep 100;
			}
			
											
		}
	}


StartMoving()
{
	bMoving=1;
}


StopMoving()
{
    bMoving=0;
}

Swing1()
{
var sleep1;
var sleep2;
var sleep3;
sleep1 = 100;
sleep2 = 100;
sleep3 = 200;
set-signal-mask BLOCKNOW;
set-signal-mask STRIKESTOP;
swinging=1;
turn ruparm to x-axis <-110> speed <250>;
turn ruparm to y-axis <0> speed <250>;
turn ruparm to z-axis <0> speed <250>;
turn rloarm to x-axis <-70> speed <250>;
turn rloarm to y-axis <20> speed <250>;
turn rloarm to z-axis <0> speed <250>;

turn luparm to x-axis <-110> speed <250>;
turn luparm to y-axis <0> speed <250>;
turn luparm to z-axis <0> speed <250>;

turn lloarm to x-axis <-70> speed <250>;
turn lloarm to y-axis <-20> speed <250>;
turn lloarm to z-axis <0> speed <250>;
turn gun to x-axis <-60> speed <250>;
turn gun to y-axis <0> speed <250>;
turn gun to z-axis <0> speed <250>;
sleep sleep1;
/*
wait-for-turn gun around x-axis;
wait-for-turn gun around y-axis;
wait-for-turn gun around z-axis;
wait-for-turn luparm around x-axis;
wait-for-turn luparm around y-axis;
wait-for-turn luparm around z-axis;
wait-for-turn lloarm around x-axis;
wait-for-turn lloarm around y-axis;
wait-for-turn lloarm around z-axis;

wait-for-turn ruparm around x-axis;
wait-for-turn ruparm around y-axis;
wait-for-turn ruparm around z-axis;

wait-for-turn rloarm around x-axis;
wait-for-turn rloarm around y-axis;
wait-for-turn rloarm around z-axis;*/

turn ruparm to x-axis <-70> speed <250>;
turn ruparm to y-axis <20> speed <250>;
turn luparm to x-axis <-70> speed <250>;
turn luparm to y-axis <-20> speed <250>;
turn rloarm to x-axis <-20> speed <250>;
turn rloarm to y-axis <0> speed <250>;
turn lloarm to x-axis <-20> speed <250>;
turn lloarm to y-axis <0> speed <250>;
turn gun to x-axis <-20> speed <250>;
sleep sleep2;
/*
wait-for-turn gun around x-axis;
wait-for-turn luparm around x-axis;
wait-for-turn luparm around y-axis;
wait-for-turn lloarm around x-axis;
wait-for-turn lloarm around y-axis;
wait-for-turn ruparm around x-axis;
wait-for-turn ruparm around y-axis;
wait-for-turn rloarm around x-axis;
wait-for-turn rloarm around y-axis;*/

turn ruparm to x-axis <0> speed <250>;
turn ruparm to y-axis <40> speed <250>;
turn ruparm to z-axis <40> speed <250>;

turn luparm to x-axis <0> speed <250>;
turn luparm to y-axis <-40> speed <250>;
turn luparm to z-axis <0> speed <250>;

turn gun to x-axis <0> speed <250>;
turn gun to y-axis <0> speed <250>;
turn gun to z-axis <30> speed <250>;
sleep sleep3;
/*
wait-for-turn luparm around x-axis;
wait-for-turn luparm around y-axis;
wait-for-turn luparm around z-axis;
wait-for-turn ruparm around x-axis;
wait-for-turn ruparm around y-axis;
wait-for-turn ruparm around z-axis;
wait-for-turn gun around x-axis;
wait-for-turn gun around y-axis;
wait-for-turn gun around z-axis;*/
//sleep 1500;
call-script WeaponReady();
}

HighCBlock()
{
set-signal-mask HIT;
var sleep1;
sleep1 = 100;
swinging=2;
turn luparm to x-axis <-120> speed <350>;
turn luparm to y-axis <-20> speed <350>;
turn luparm to z-axis <0> speed <350>;

turn lloarm to x-axis <0> speed <350>;
turn lloarm to y-axis <0> speed <350>;
turn lloarm to z-axis <40> speed <350>;

turn ruparm to x-axis <-60> speed <350>;
turn ruparm to y-axis <40> speed <350>;
turn ruparm to z-axis <40> speed <350>;

turn rloarm to x-axis <-100> speed <350>;
turn rloarm to y-axis <0> speed <350>;
turn rloarm to z-axis <0> speed <350>;

turn gun to x-axis <0> speed <350>;
turn gun to y-axis <0> speed <350>;
turn gun to z-axis <-70> speed <350>;

wait-for-turn gun around x-axis;
wait-for-turn gun around y-axis;
wait-for-turn gun around z-axis;
wait-for-turn luparm around x-axis;
wait-for-turn luparm around y-axis;
wait-for-turn luparm around z-axis;
wait-for-turn lloarm around x-axis;
wait-for-turn lloarm around y-axis;
wait-for-turn lloarm around z-axis;

wait-for-turn ruparm around x-axis;
wait-for-turn ruparm around y-axis;
wait-for-turn ruparm around z-axis;

wait-for-turn rloarm around x-axis;
wait-for-turn rloarm around y-axis;
wait-for-turn rloarm around z-axis;
blocked=1;
emit-sfx block from blockemit;
sleep sleep1;
call-script WeaponReady();
}

MedLBlock()
{

}

Swing2()
{
set-signal-mask BLOCKNOW;
swinging=1;
var sleep1;
var sleep2;
sleep1 = 100;
sleep2 = 100;
//call-script WeaponReady();
turn ruparm to x-axis <-70> speed <250>;
turn ruparm to y-axis <0> speed <250>;
turn ruparm to z-axis <60> speed <250>;

turn rloarm to x-axis <-20> speed <250>;
turn rloarm to y-axis <0> speed <250>;
turn rloarm to z-axis <0> speed <250>;

turn luparm to x-axis <0> speed <250>;
turn luparm to y-axis <0> speed <250>;
turn luparm to z-axis <0> speed <250>;

turn lloarm to x-axis <0> speed <250>;
turn lloarm to y-axis <0> speed <250>;
turn lloarm to z-axis <0> speed <250>;

turn gun to x-axis <0> speed <250>;
turn gun to y-axis <0> speed <250>;
turn gun to z-axis <0> speed <250>;

sleep sleep1;
/*
wait-for-turn gun around x-axis;
wait-for-turn gun around y-axis;
wait-for-turn gun around z-axis;

wait-for-turn ruparm around x-axis;
wait-for-turn ruparm around y-axis;
wait-for-turn ruparm around z-axis;

wait-for-turn rloarm around x-axis;
wait-for-turn rloarm around y-axis;
wait-for-turn rloarm around z-axis;

wait-for-turn luparm around x-axis;
wait-for-turn luparm around y-axis;
wait-for-turn luparm around z-axis;

wait-for-turn lloarm around x-axis;
wait-for-turn lloarm around y-axis;
wait-for-turn lloarm around z-axis;*/

turn ruparm to z-axis <-30> speed <250>;
turn rloarm to z-axis <-50> speed <250>;
sleep sleep2;
/*
wait-for-turn ruparm around z-axis;
wait-for-turn rloarm around z-axis;*/
call-script WeaponReady();
}

Swing3()
{
set-signal-mask BLOCKNOW;
swinging=1; 
//anim
call-script WeaponReady();
}

SaberControl()
{
	while (1)
	{
		while (bAiming==1)
		{
		var PickSwing;
		PickSwing = rand(1,1);
		emit-sfx saber from flare;
		emit-sfx saber_notify1 from sword_trigger;
		sleep 10;
		if (swinging==0 && stunned == 0)
			{
			if (PickSwing==1) start-script Swing1();
			if (PickSwing==2) start-script Swing2();
			//if (PickSwing==3) call-script Swing3();
			}		
		}
	sleep 100;
	}
}

Create()
{
	start-script WeaponReady();
	start-script Run();
	start-script SaberControl();
	RUN_SPEED = rand(16,20); // de-sync the speed of the running anims, and add some variation between troops
	move ground to y-axis -0.5 speed <100>;
	WALK_SPEED = rand(9,11);
	prone_speed = rand(3,5);
	DEATH_SPEED=10;
	bAiming=0;
	hide flare;
	hide sword_trigger;
	swinging=0;
	stunned=0;
	InAimStance=0;
}

StartBuilding(heading,pitch)
{
set INBUILDSTANCE to 1;
}

StopBuilding()
{
set INBUILDSTANCE to 0;
}

HitByWeaponId(z,x,id,damage) //TODO ! give each strike its own ghost weapon to notify so blocks can respond accordingly without
//needing to know the actual direction of it.
{	

	if (stunned == 1) return (100);
	
	if (damage>1 && swinging==2)
	{
	signal HIT;
	call-script WeaponReady();
	}
	
	if (Id==Strike1Trigger && swinging != 2 && stunned == 0)
	{
	signal BLOCKNOW;
	call-script HighCBlock();
	return (0);
	}
	
	if (Id==Strike2Trigger)
	{
	signal BLOCKNOW;
	call-script MedLBlock();
	return (0);
	}
	
	if (Id==BlockedTrigger)
	{
	signal STRIKESTOP;
	signal HIT;
	swinging=2;
	stunned=1;
	sleep blockstun;
	explode head type FALL;
	call-script WeaponReady();
	return (0);
	}
	return (1);
}

QueryNanoPiece(piecenum)
{
	piecenum = head;
}


SweetSpot(piecenum)
{
	piecenum = torso;
}

AimFromWeapon1(piecenum)
{
	piecenum = torso;
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

RestoreAfterDelay()
{
sleep CombatDelay;
bAiming=0;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn torso to y-axis heading speed <200>;
	turn torso to x-axis <0> - pitch speed <200>;
	bAiming=1;
	start-script RestoreAfterDelay();
	return (0);
}

FireWeapon1(heading)
{
	return (0);
}

