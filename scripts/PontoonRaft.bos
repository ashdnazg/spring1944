#include "constants.h"

piece  base, deck, load_shoulder, load_arm, wake1, wake2;

// Signal definitions
#define SIG_MOVE			2

TransportPickup(unitid)
{
	if( get UNIT_ALLIED(unitid) == 1) { // only pick up allied units
		set BUSY to 1;
		attach-unit unitid to deck;
		set BUSY to 0;
	}
}
TransportDrop(unitid, position)
{
	var heightDiff;
	// check height difference between transport and unload point. Not sure what would be reasonable yet
	heightDiff = get GROUND_HEIGHT(position) - get PIECE_Y(base);
	if (heightDiff > [5])
	{
		return FALSE;
	}
	set BUSY to 1;
	// turn shoulder to face the drop off point
	turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
	attach-unit unitid to load_arm;
	// move arm toward drop off point
	move load_arm to z-axis get XZ_HYPOT(get PIECE_XZ(base) - position) now; // new line
	// sleep for at least a frame (so unit is not dropped by attach-unit)
	sleep 50;
	//get PRINT (unitid, position / 65536, position & 65535);
	drop-unit unitid;
	move load_arm to z-axis 0 now;
	set BUSY to 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	/*emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;*/
		while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Create()
{
	hide deck;
	turn deck to x-axis <0> now;
	turn deck to y-axis <0> now;
	turn deck to z-axis <0> now;
	
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 999 )
	{
		corpsetype = 1;
		
		return (0);
	}
	corpsetype = 1;
//	explode body type SHATTER;
}
