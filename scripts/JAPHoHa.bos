#define TA			// This is a TA script

#include "constants.h" // Thank you Argh

piece	base, load_shoulder, load_arm, tow_point,
		front_wheel, rear_wheel, drive_wheel, mid_wheel1,  mid_wheel2, mid_wheel3, mid_wheel4,
		tracks, tent, exhaust;
 
static-var restore_delay, bMoving, treadnum, aim1, shotCount;


#define FX_HIDE\
	
// Signal definitions
#define SIG_MOVE			1
#define SIG_AIM				2 // Machinemg
#define INFANTRY			412876 //458752 // this is 65536 * s3o model radius
#define FUDGE				50 // isn't enough even between smg and rifle

#define WHEEL_SPEED			<350>

// exhaust smoke
#define EXHAUST_SMOKE 1024+1

// Transport script courtesy of Gnome's script for Spring SW reb ground trans
TransportPickup(unitid) {
	if( get UNIT_ALLIED(unitid) == 1) { // only pick up allied units
			attach-unit unitid to base;
	}
}

TransportDrop(unitid, position) {
	var depth, pos;
	depth = get GROUND_HEIGHT(get PIECE_XZ(base));
	if(depth < 3) {
		return 0;
	}
	pos = get XZ_HYPOT(get PIECE_XZ(base) - position) + [5];
	set BUSY to 1;
	turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
	attach-unit unitid to load_arm;
	move load_arm to z-axis pos speed [10000];
	wait-for-move load_arm along z-axis;
	drop-unit unitid;
	move load_arm to z-axis [0] now;
	wait-for-move load_arm along z-axis;
	sleep 1;
	set BUSY to 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	bMoving = TRUE;
	spin front_wheel around x-axis speed WHEEL_SPEED;
	spin drive_wheel around x-axis speed WHEEL_SPEED * 1.5;
	spin rear_wheel around x-axis speed WHEEL_SPEED * 1.5;
	spin mid_wheel1 around x-axis speed WHEEL_SPEED * 1.5;
	spin mid_wheel2 around x-axis speed WHEEL_SPEED * 1.5;
	spin mid_wheel3 around x-axis speed WHEEL_SPEED * 1.5;
	spin mid_wheel4 around x-axis speed WHEEL_SPEED * 1.5;
	emit-sfx EXHAUST_SMOKE from exhaust;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	stop-spin front_wheel around x-axis decelerate <100.000000>;
	stop-spin drive_wheel around x-axis decelerate <100.000000>;
	stop-spin rear_wheel around x-axis decelerate <100.000000>;
	stop-spin mid_wheel1 around x-axis decelerate <100.000000>;
	stop-spin mid_wheel2 around x-axis decelerate <100.000000>;
	stop-spin mid_wheel3 around x-axis decelerate <100.000000>;
	stop-spin mid_wheel4 around x-axis decelerate <100.000000>;
}

Create()
{
	set STANDINGMOVEORDERS to 0; //hold pos by default.
	FX_HIDE
//	spin tow_point around y-axis speed <100>;
	aim1 = FALSE;
	treadnum=0;
	shotCount=0;
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned
		corpsetype = 1;
	
		return (0);
	}
	if(severity<=250)
	{
		// burning
		corpsetype=2;
		explode base type BITMAPONLY;
		explode tent type FIRE | EXPLODE_ON_HIT;
		return 0;
	}
	if(severity<=1000)
	{
		// burning
		corpsetype=3;
		explode base type BITMAPONLY;
		explode front_wheel type FIRE | EXPLODE_ON_HIT;
		explode rear_wheel type FIRE | EXPLODE_ON_HIT;
		return 0;
	}
	corpsetype = 4;
	explode base type SHATTER | EXPLODE_ON_HIT;
	explode tent type SHATTER | EXPLODE_ON_HIT;
	explode front_wheel type SHATTER | EXPLODE_ON_HIT;
}
