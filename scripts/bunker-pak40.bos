#define TAK

#include "sfxtype.h"
#include "exptype.h"

piece  base, bunker, pos1, pos2, pos3, pos4, pos5, load_shoulder, load_arm;
static-var	unit1, unit2, unit3, unit4, unit5;
 
// Signal definitions
#define SIG_AIM				2 // Machinemg
#define INFANTRY			412876 //458752 // this is 65536 * s3o model radius
#define FUDGE				50 // isn't enough even between smg and rifle
//#define UNIT_ALLIED			74

// Transport script courtesy of Gnome's script for Spring SW reb ground trans
TransportPickup(unitid)
{
if( get UNIT_ALLIED(unitid) == 1)
	{ // only pick up allied units
		if(get XZ_HYPOT(get UNIT_XZ(unitid) - get PIECE_XZ(base)) <= [200])
		{
			if(unit1== -1)
			{
				attach-unit unitid to pos1;
				unit1=unitid;
			} else
			{
				if(unit2== -1)
				{
					attach-unit unitid to pos2;
					unit2=unitid;
				} else
				{
					if(unit3== -1)
					{
						attach-unit unitid to pos3;
						unit3=unitid;
					} else
					{
						if(unit4== -1)
						{
							attach-unit unitid to pos4;
							unit4=unitid;
						} else
						{
							if(unit5== -1)
							{
								attach-unit unitid to pos5;
								unit5=unitid;
							} else
							{
								attach-unit unitid to base;
							}
						}
					}
				}
			}
		}
	}
}

TransportDrop(unitid, position) {
	var depth, pos;
	depth = get GROUND_HEIGHT(get PIECE_XZ(base));
	if(depth < 3) {
		return 0;
	}
	pos = get XZ_HYPOT(get PIECE_XZ(base) - position) + [5];
	set BUSY to 1;
	turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
	attach-unit unitid to load_arm;
	move load_arm to z-axis pos speed [10000];
	wait-for-move load_arm along z-axis;
	drop-unit unitid;
	if(unitid==unit1)
	{
		unit1= -1;
	}
	if(unitid==unit2)
	{
		unit2= -1;
	}
	if(unitid==unit3)
	{
		unit3= -1;
	}
	if(unitid==unit4)
	{
		unit4= -1;
	}
	if(unitid==unit5)
	{
		unit5= -1;
	}
	move load_arm to z-axis [0] now;
	wait-for-move load_arm along z-axis;
	sleep 1;
	set BUSY to 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	unit1= -1;
	unit2= -1;
	unit3= -1;
	unit4= -1;
	unit5= -1;
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 999 )
	{
		corpsetype = 1;
		explode bunker type SHATTER | EXPLODE_ON_HIT;
		return (0);
	}
	corpsetype = 1;
	explode bunker type SHATTER | EXPLODE_ON_HIT;
}
