#define TA			// This is a TA script

#include "constants.h"


piece	base, front_wheels, rear_wheels1, rear_wheels2, turret, sleeve, barrel, flare, gun_wheels;
 
static-var restore_delay, bMoving, rock, bAimAA, shotCount;


#define FX_HIDE\
	hide flare;\

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// Signal definitions
#define SIG_MOVE			1
#define SIG_AIM				2 // 20mm

#define TURR_TRAVERSE		<800>
#define TURR_ELEVATE		<615>

//weapon stuff
// definitions for weapons behaviour
#define RELOAD		300 // time in milliseconds between shots
#define RECOIL		[-1] // distance to recoil the gun
#define RETURN_SPEED	[20] // speed at which the barrel returns
#define BURST		5

#define MG_MUZZLEFLASH 1024+7
#define XSMALL_MUZZLEFLASH 1024+8
#define XSMALL_MUZZLEDUST 1024+9

// tracers
#define SMALL_TRACER 	2048+2
#define LARGE_TRACER		2048+3
#define TRACER_PER_X_SHOTS_1	3
#define TRACER_PER_X_SHOTS_3	5


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	bMoving = TRUE;
	spin front_wheels around x-axis speed <350.082418>;
	spin rear_wheels1 around x-axis speed <350.082418>;
	spin rear_wheels2 around x-axis speed <350.082418>;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	stop-spin front_wheels around x-axis decelerate <100.000000>;
	stop-spin rear_wheels1 around x-axis decelerate <100.000000>;
	stop-spin rear_wheels2 around x-axis decelerate <100.000000>;
}

Create()
{
	set STANDINGMOVEORDERS to 0; //hold pos by default.
	FX_HIDE
	bAimAA = FALSE;
	shotCount = 0;
	start-script SmokeUnit();
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed TURR_TRAVERSE;
	turn sleeve to x-axis <0.000000> speed TURR_ELEVATE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	bAimAA = TRUE;
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	
	start-script RestoreAfterDelay();
	bAimAA = FALSE;
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	return 0;
}

Shot1(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	++shotCount;
	if(shotCount >= TRACER_PER_X_SHOTS_1)
	{
		emit-sfx LARGE_TRACER from flare;
		shotCount=0;
	}
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 50;
	move barrel to z-axis 0 speed RETURN_SPEED;
}

// Weapon 2 - Main cannon, HE
QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

AimWeapon2(heading, pitch)
{
	if (bAimAA)
	{
		return FALSE;
	}

	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	
	start-script RestoreAfterDelay();

	return 1;
}

FireWeapon2()
{
	rock = TRUE; // firing a heavy weapon
	return 0;
}

Shot2(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	++shotCount;
	if(shotCount>=TRACER_PER_X_SHOTS_1)
	{
		emit-sfx LARGE_TRACER from flare;
		shotCount=0;
	}
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 50;
	move barrel to z-axis 0 speed RETURN_SPEED;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned
		corpsetype = 1;
	
		return (0);
	}
	if(severity<=250)
	{
		// burning
		corpsetype=2;
		explode base type BITMAPONLY;
		explode gun_wheels type FIRE | FALL;
		explode front_wheels type FIRE | EXPLODE_ON_HIT;
		return 0;
	}
	explode base type SHATTER;
	explode front_wheels type FIRE | EXPLODE_ON_HIT;
	explode rear_wheels1 type FIRE | EXPLODE_ON_HIT;
	explode rear_wheels2 type FIRE | EXPLODE_ON_HIT;
	explode turret type FIRE | EXPLODE_ON_HIT;
	return 0;
}
