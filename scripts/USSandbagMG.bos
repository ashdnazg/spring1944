#define TAK			// This is a TAK script

#include "STANDARD_COMMANDS_GPL.h"

piece  torso, flare, pelvis, rthigh, lthigh, lleg, rleg, rfoot, turret, lfoot, luparm, lloarm, ground, gun, ruparm, rloarm, head, tripod;

static-var bAiming, DecreasingFear, last_pos, bMoving, nade_active, run_speed,
 nade_speed, walk_speed, fear, prone_speed, IsProne, DEATH_SPEED, PickDeath, IsPinned, InAimStance, HipAim;

#define SIG_AIM            2
#define BURSTRATE	100//burstrate of the MG weapon, minus 10 ms
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_TRACER 2048+1

#define FearLimit	14 //max amount of fear they can possibly get. any additional is ignored
#define RecoverConstant 1  //how much fear they subtract from the total each RecoverRate
#define PinnedLevel	10 //fear level where they stop shooting and freeze on the ground
#define RecoverRate	500 //how often RecoverConstant is subtracted from total fear level
//#define InitialFreeze 2000 //how long they stay down before they start recovering
//various levels of fear added when these weapons hit

#define LittleFear	3 //small arms or very small calibre cannon: MGs, snipers, LMGs, 20mm
#define MedFear	6 //small/med explosions: mortars, 88mm guns and under
#define BigFear	11 //large explosions: small bombs, 155mm - 105mm guns
#define MortalFear	16 //omgwtfbbq explosions: medium/large bombs, 170+mm guns, rocket arty


//movement check for anims

WeaponReady() //attentshaun!
{
	move pelvis to y-axis [-1.2] speed <500>*PRONE_SPEED;
	turn pelvis to y-axis <0> speed <100>*RUN_SPEED;
	turn pelvis to x-axis <0> speed <100>*RUN_SPEED;
	turn pelvis to z-axis <0> speed <100>*RUN_SPEED;
	
	turn torso to x-axis <25> speed <100>*RUN_SPEED;
	turn torso to y-axis <0> speed <100>*RUN_SPEED;
	turn torso to z-axis <0> speed <100>*RUN_SPEED;
	
	turn rthigh to x-axis <-10> speed <100>*RUN_SPEED;
	turn rthigh to y-axis <0> speed <100>*RUN_SPEED;
	turn rthigh to z-axis <0> speed <100>*RUN_SPEED;
	turn rleg to x-axis <110> speed <100>*RUN_SPEED;
	turn rleg to y-axis <0> speed <100>*RUN_SPEED;
	turn rleg to z-axis <0> speed <100>*RUN_SPEED;
	
	turn lthigh to x-axis <-90> speed <100>*RUN_SPEED;
	turn lthigh to y-axis <0> speed <100>*RUN_SPEED;
	turn lthigh to z-axis <0> speed <100>*RUN_SPEED;
	turn lleg to x-axis <90> speed <100>*RUN_SPEED;
	turn lleg to y-axis <0> speed <100>*RUN_SPEED;
	turn lleg to z-axis <0> speed <100>*RUN_SPEED;
	
    turn ruparm to x-axis <-85> speed <40>*RUN_SPEED;
    turn ruparm to y-axis <0> speed <40>*RUN_SPEED;
    turn ruparm to z-axis <0> speed <40>*RUN_SPEED;
    
	turn rloarm to x-axis <0> speed <100>*RUN_SPEED;
	turn rloarm to y-axis <0> speed <100>*RUN_SPEED;
	turn rloarm to z-axis <-25> speed <100>;
    
	turn luparm to x-axis <-85> speed <40>*RUN_SPEED;
	turn luparm to y-axis <0> speed <40>*RUN_SPEED;
	turn luparm to z-axis <0> speed <40>*RUN_SPEED;
    
	turn lloarm to x-axis <0> speed <100>*RUN_SPEED;
	turn lloarm to y-axis <0> speed <100>*RUN_SPEED;
	turn lloarm to z-axis <25> speed <100>*RUN_SPEED;
    
	turn gun to x-axis <0.000000> speed <100>*RUN_SPEED;
	turn gun to y-axis <0.000000> speed <100>*RUN_SPEED;
	turn gun to z-axis <0.000000> speed <100>*RUN_SPEED;
	turn head to y-axis <0.000000> speed <100>*RUN_SPEED;
	turn head to x-axis <0.000000> speed <100>*RUN_SPEED;
	turn head to z-axis <0.000000> speed <100>*RUN_SPEED;
}


TakeCover()
{
set-signal-mask 0;

		SET MAX_SPEED to [0.00001];
		SET ARMORED to TRUE;
		//bMoving=0;

	if (IsProne == 0)
	{
	
				IsProne=1;
		turn pelvis to y-axis <0> speed <150>*PRONE_SPEED;
		turn pelvis to z-axis <0> speed <150>*PRONE_SPEED;
		
		Move pelvis to y-axis [-0.3] speed <150>*PRONE_SPEED;
		turn rthigh to x-axis <-40> speed <150>*PRONE_SPEED;
		turn rleg to x-axis <70> speed <100>*PRONE_SPEED;
		turn lthigh to x-axis <-40> speed <100>*PRONE_SPEED;
		turn lleg to x-axis <70> speed <100>*PRONE_SPEED;
		turn torso to y-axis <0> speed <150>*PRONE_SPEED;
		turn torso to x-axis <20> speed <150>*PRONE_SPEED;
		turn head to x-axis <-20> speed <150>*PRONE_SPEED;

		turn ruparm to y-axis <0> speed <150>*PRONE_SPEED;
		turn ruparm to z-axis <0> speed <150>*PRONE_SPEED;
		turn ruparm to x-axis <-70> speed <100>*PRONE_SPEED;

		turn rloarm to x-axis <0> speed <150>*PRONE_SPEED;
		turn rloarm to y-axis <0> speed <150>*PRONE_SPEED;
		turn rloarm to z-axis <-55> speed <150>*PRONE_SPEED;

		turn luparm to y-axis <0> speed <100>*PRONE_SPEED;
		turn luparm to z-axis <0> speed <100>*PRONE_SPEED;
		turn luparm to x-axis <-75> speed <100>*PRONE_SPEED;
		turn lloarm to x-axis <0> speed <150>*PRONE_SPEED; 

	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	wait-for-turn rthigh around x-axis;
	wait-for-turn lthigh around x-axis;	
		turn torso to x-axis <0> speed <120>*PRONE_SPEED;
		turn torso to y-axis <0> speed <120>*PRONE_SPEED;
		turn torso to z-axis <0> speed <120>*PRONE_SPEED;

		Move pelvis to y-axis [0.525] speed <1520>*PRONE_SPEED;
		Turn pelvis to x-axis <90> speed <40>*PRONE_SPEED; //20
		Turn rthigh to x-axis <0> speed <120>*PRONE_SPEED;
		Turn rthigh to y-axis <0> speed <120>*PRONE_SPEED;
		Turn rthigh to z-axis <10> speed <120>*PRONE_SPEED;
		Turn rleg to x-axis <35> speed <120>*PRONE_SPEED;
		
		turn lthigh to y-axis <0> speed <120>*PRONE_SPEED;
		Turn lthigh to x-axis <0> speed <120>*PRONE_SPEED;
		Turn lthigh to z-axis <-10> speed <120>*PRONE_SPEED;
		Turn lleg to x-axis <35> speed <120>*PRONE_SPEED;
		
		turn ruparm to x-axis <180> speed <120>*PRONE_SPEED;
			
		turn luparm to x-axis <180> speed <120>*PRONE_SPEED;
		turn lloarm to z-axis <40> speed <120>*PRONE_SPEED;

	wait-for-turn lloarm around z-axis;
		Move pelvis to y-axis [-2.25] speed <2250>*PRONE_SPEED;
		Turn pelvis to x-axis <65> speed <60>*PRONE_SPEED;
	wait-for-turn pelvis around x-axis;
	wait-for-move pelvis along y-axis;
		
		Turn head to x-axis <-60> speed <120>*PRONE_SPEED;
		turn head to y-axis <0> speed <120>*PRONE_SPEED;
		turn head to z-axis <0> speed <120>*PRONE_SPEED;
	
		Turn ruparm to x-axis <-85> speed <120>*PRONE_SPEED;
		Turn ruparm to y-axis <0> speed <120>*PRONE_SPEED;
		turn ruparm to z-axis <-50> speed <120>*PRONE_SPEED;
		
		Turn rloarm to x-axis <-100> speed <120>*PRONE_SPEED;
		Turn rloarm to y-axis <0> speed <120>*PRONE_SPEED;
		Turn rloarm to z-axis <0> speed <120>*PRONE_SPEED;
		
		turn luparm to x-axis <-140> speed <120>*PRONE_SPEED;
		turn luparm to y-axis <0> speed <120>*PRONE_SPEED;
		turn luparm to z-axis <35> speed <120>*PRONE_SPEED;
		
		turn lloarm to x-axis <0> speed <120>*PRONE_SPEED;
		turn lloarm to y-axis <0> speed <120>*PRONE_SPEED;
		turn lloarm to z-axis <0> speed <120>*PRONE_SPEED;
		
	///	turn gun to x-axis <30> speed <120>*PRONE_SPEED;
	//	turn gun to y-axis <30> speed <120>*PRONE_SPEED;
	//	turn gun to z-axis <0> speed <120>*PRONE_SPEED;
	wait-for-turn rthigh around x-axis;
	wait-for-turn rthigh around y-axis;
	wait-for-turn rthigh around z-axis;
	
	wait-for-turn lthigh around x-axis;
	wait-for-turn lthigh around y-axis;
	wait-for-turn lthigh around z-axis;
	
	wait-for-turn rleg around x-axis;
	
	wait-for-turn lleg around x-axis;
	
	wait-for-turn head around x-axis;
	
	wait-for-turn ruparm around x-axis;
	wait-for-turn ruparm around y-axis;
	wait-for-turn ruparm around z-axis;
	
	wait-for-turn luparm around x-axis;
	wait-for-turn luparm around y-axis;
	wait-for-turn luparm around z-axis;
	
	wait-for-turn rloarm around x-axis;
	wait-for-turn rloarm around y-axis;
	wait-for-turn rloarm around z-axis;
	
	wait-for-turn lloarm around x-axis;
	wait-for-turn lloarm around y-axis;
	wait-for-turn lloarm around z-axis;
	
	//wait-for-turn gun around x-axis;
//	wait-for-turn gun around y-axis;
//	wait-for-turn gun around z-axis;
	}


		sleep 100;
		return(0);
}

RestoreAfterCover() //get up out of the dirt. also controls going into pinned mode.
{
	


		if (fear <=0 && IsProne==1)
		{	
		call-script WeaponReady();
				fear=0;
				IsProne=0;
				SET ARMORED to FALSE;
				set MAX_SPEED to [0.5];
	
		}
		return (1);
		sleep 100;
	}


FearRecovery() 
{ 


     if (DecreasingFear==1) return (1);  // better to use signals here


     DecreasingFear = 1;
     while(fear > 0) 
          { 

          fear = fear - RecoverConstant; 
          sleep RecoverRate; 
          } 
start-script RestoreAfterCover(); 
DecreasingFear=0; 
 
return (1); 
}


HitByWeaponId(z,x,id,damage)
{	
	if (Id<=300 || Id>700)
		return (100); // DON'T NEED BRACKETS FOR return STATEMENTS!
	
	if (300<Id && Id<=400) //301-400=small arms or very small calibre cannon: MGs, snipers, LMGs, 20mm
		fear = fear + LittleFear;
	if (400<Id && Id<=500) //401-500=small/med explosions: mortars, 75mm guns and under
		fear = fear + MedFear;
	if (500<Id && Id<=600) //501-600=large explosions: small bombs, 155mm - 88mm guns,
		fear = fear + BigFear;
	if (600<Id && Id<=700) //601-700=omgwtfbbq explosions: medium/large bombs, 170+mm guns, rocket arty 
		fear = fear + MortalFear;

	if (fear > FearLimit) fear = FearLimit; // put this line AFTER increasing fear var
		
	start-script TakeCover();
	sleep 100; // what is this for??
	start-script FearRecovery();
	
	return (1); //if it gets to here, its a nondamaging suppression weapon anyways, so 1% doesn't matter. // You can return 0 now
}

luaFunction(arg1)
{
 arg1 = fear;
}


Create()
{
	nade_active=0;
	start-script WeaponReady();
	RUN_SPEED = rand(16,20); // de-sync the speed of the running anims, and add some variation between troops
	move ground to y-axis -0.5 speed <100>;
	nade_speed = 4;
	WALK_SPEED = rand(9,11);
	prone_speed = rand(3,5);
	DEATH_SPEED=10;
	IsProne=0;
	IsPinned=0;
	hide flare;
	InAimStance=0;
}



SweetSpot(piecenum)
{
	piecenum = torso;
}


AimFromWeapon1(piecenum)
{
	piecenum = head;
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimWeapon1(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	bAiming=1;
	
	if (IsProne==1 || fear > 0)	return (0);
	
	if (IsProne==0 && fear == 0)
	{	
 		turn gun to y-axis heading speed <35>;
 		wait-for-turn gun around y-axis;
 		return (1);
	}
	
	return (0);
}

FireWeapon1()
{
		
	emit-sfx MG_MUZZLEFLASH from flare;
	sleep BURSTRATE;
	emit-sfx SMALL_TRACER from flare;
	emit-sfx MG_MUZZLEFLASH from flare;
	sleep BURSTRATE;
	emit-sfx MG_MUZZLEFLASH from flare;
	sleep BURSTRATE;
	emit-sfx MG_MUZZLEFLASH from flare;
	sleep BURSTRATE;
	emit-sfx SMALL_TRACER from flare;
	emit-sfx MG_MUZZLEFLASH from flare;
	sleep BURSTRATE;
	emit-sfx MG_MUZZLEFLASH from flare;
	sleep BURSTRATE;
	emit-sfx SMALL_TRACER from flare;
	emit-sfx MG_MUZZLEFLASH from flare;
	sleep BURSTRATE;
	return (0);

}


#include "Inf_death.h"