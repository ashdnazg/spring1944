#define TAK

piece base, turret, grabber, link,
	prop1, prop2,
	  wake1, wake2, wake3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

#define LOAD_DIST			[125]

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_LOAD			4

#define SMOKEPIECE	base

#include "constants.h"
#include "damageSmoke.h"
static-var					MaxSpeed, bMoving, bTooFar, boom_len, boom_heading, boom_pitch;

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			sleep 500;
		}
		sleep 500;
	}
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

Create()
{
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
}

//Transport stuff
BoomCalc(posxz,posy)
{
	var dxz,dy,lenxz;

	dxz = get PIECE_XZ(turret) - posxz;
	dy = posy - get PIECE_Y(turret);
	lenxz = get XZ_HYPOT(dxz);

	boom_len = get HYPOT(lenxz,dy);
	boom_heading = get XZ_ATAN(dxz);
	boom_pitch = get ATAN(dy,lenxz);
	bTooFar = (boom_len > LOAD_DIST);
}

PositionLink(posxz,posy)
{
	turn turret to y-axis boom_heading now;
	turn grabber to x-axis 0-boom_pitch now;
	move grabber to z-axis boom_len now;
}

ReturnLink()
{
	turn turret to y-axis <0> now;
	turn grabber to x-axis <0> now;
	move grabber to z-axis [0] now;
}

TransportPickup(unitid)
{
	if( get UNIT_ALLIED(unitid) == 1) { // only pick up allied units
		set BUSY to 1;
		attach-unit unitid to 0 - 1; // hide infantry models
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	set BUSY to 1;
	// turn shoulder to face the drop off point
	turn turret to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
	attach-unit unitid to link;
	// move arm toward drop off point
	move link to z-axis get XZ_HYPOT(get PIECE_XZ(base) - position) now; // new line
	// sleep for at least a frame (so unit is not dropped by attach-unit)
	sleep 50;
	//get PRINT (unitid, position / 65536, position & 65535);
	drop-unit unitid;
	move link to z-axis 0 now;
	set BUSY to 0;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	stop-spin prop1 around z-axis;
	stop-spin prop2 around z-axis;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var newXZ, oldXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	spin prop1 around z-axis speed <200>;
	spin prop2 around z-axis speed <200>;
	bMoving = TRUE;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<50)
	{
		corpsetype = 1;
		return (TRUE);
	}
	corpsetype = 2;
	explode base type		SHATTER;
	return (TRUE);
}