#define TA			// This is a TA script

#include "constants.h"

piece	base, wheels1, wheels2, spares, turret, sleeve, barrel, flare, coaxflare, rear_gun, rear_flare;
 
static-var restore_delay, bMoving, rock, treadnum, GunAiming, MGAiming, mainHead, aim1, aim2, shotCount1, shotCount3, shotCount4, reloading;


#define FX_HIDE\
	hide flare;\
	hide coaxflare;\
	hide rear_flare;\
	turn rear_gun to y-axis <180> now;\

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// Signal definitions
#define SIG_MOVE			1
#define SIG_AIM				2 // 20mm
#define SIG_AIM_2			4 // coax
#define SIG_AIM_3			8 // rear MG

#define TURR_TRAVERSE		<20>
#define TURR_ELEVATE		<10>
#define MG_TRAVERSE			<20>

#define COAX_ARC			<3>

//weapon stuff
// definitions for weapons behaviour
#define RELOAD		300 // time in milliseconds between shots
#define RECOIL		[-1] // distance to recoil the gun
#define RETURN_SPEED	[20] // speed at which the barrel returns
#define BURST		5

#define MG_MUZZLEFLASH 1024+7
#define XSMALL_MUZZLEFLASH 1024+8
#define XSMALL_MUZZLEDUST 1024+9

// tracers
#define SMALL_TRACER 	2048+4
#define LARGE_TRACER		2048+5
#define TRACER_PER_X_SHOTS_1	3
#define TRACER_PER_X_SHOTS_2	5
#define TRACER_PER_X_SHOTS_3	TRACER_PER_X_SHOTS_2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	bMoving = TRUE;
	/*emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;*/
	spin wheels1 around x-axis speed <350.082418>;
	spin wheels2 around x-axis speed <350.082418>;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	stop-spin wheels1 around x-axis decelerate <100.000000>;
	stop-spin wheels2 around x-axis decelerate <100.000000>;
}

Create()
{
	set STANDINGMOVEORDERS to 0; //hold pos by default.
	FX_HIDE
//	spin tow_point around y-axis speed <100>;
	aim1 = FALSE;
	treadnum=0;
	shotCount3=0;
	shotCount4=0;
	start-script SmokeUnit();
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed TURR_TRAVERSE;
	turn sleeve to x-axis <0.000000> speed TURR_ELEVATE;
	turn rear_gun to y-axis <180> speed MG_TRAVERSE;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	if (aim2) return 0; // don't aim weap1 if aiming AP
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	GunAiming=1;
	
	mainHead = heading;
		
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	
	start-script RestoreAfterDelay();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	GunAiming=0;
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	start-script Reload(); // start reload timer after firing
	return 0;
}

Shot1(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	++shotCount1;
	if(shotCount1 >= TRACER_PER_X_SHOTS_1)
	{
		emit-sfx LARGE_TRACER from flare;
		shotCount1=0;
	}
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 50;
	move barrel to z-axis 0 speed RETURN_SPEED;
}

// Weapon 2 - Main cannon, AP
QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

AimWeapon2(heading, pitch)
{
	aim2 = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	mainHead = heading;

	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	
	start-script RestoreAfterDelay();
	aim2 = FALSE;
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	return 1;
}

FireWeapon2()
{
	rock = TRUE; // firing a heavy weapon
	start-script Reload(); // start reload timer after firing
	return 0;
}

Shot2(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	++shotCount1;
	if(shotCount1>=TRACER_PER_X_SHOTS_1)
	{
		emit-sfx LARGE_TRACER from flare;
		shotCount1=0;
	}
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 50;
	move barrel to z-axis 0 speed RETURN_SPEED;
}

// Weapon 3 - Coax MG
QueryWeapon3 (piecenum)
{
	piecenum = coaxFlare;
}

AimFromWeapon3 (piecenum)
{
	piecenum = turret;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	MGAiming=1;
	if (mainHead > 0) {
	  if (heading < mainHead - COAX_ARC || heading > mainHead + COAX_ARC) return 0;
	}
	if (mainHead < 0) {
	  if (heading > mainHead - COAX_ARC || heading < mainHead + COAX_ARC) return 0;		
	}
	
	//turn turret to y-axis heading speed TURR_TRAVERSE;
	wait-for-turn turret around y-axis;
	
	start-script RestoreAfterDelay();
	MGAiming=0;
	return (1);
}

FireWeapon3()
{
	rock = FALSE;
	return(0);
}

Shot3(foo)
{
	++shotCount3;
	if(shotCount3>=TRACER_PER_X_SHOTS_3)
	{
		emit-sfx SMALL_TRACER from coaxflare;
		shotCount3=0;
	}
	emit-sfx MG_MUZZLEFLASH from coaxflare;
}

// Weapon 4 - rear MG
QueryWeapon4 (piecenum)
{
	piecenum = rear_flare;
}

AimFromWeapon4 (piecenum)
{
	piecenum = rear_gun;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;

	turn rear_gun to y-axis heading speed MG_TRAVERSE;
	wait-for-turn rear_gun around y-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon4()
{
	rock = FALSE;
	return(0);
}

Shot4(foo)
{
	++shotCount4;
	if(shotCount4 >= TRACER_PER_X_SHOTS_3)
	{
		emit-sfx SMALL_TRACER from rear_flare;
		shotCount4=0;
	}
	emit-sfx MG_MUZZLEFLASH from rear_flare;
	return 0;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned
		corpsetype = 1;
	
		return (0);
	}
	if(severity<=250)
	{
		// burning
		corpsetype=2;
		explode base type BITMAPONLY;
		explode wheels1 type FIRE | EXPLODE_ON_HIT;
		explode wheels2 type FIRE | EXPLODE_ON_HIT;
		return 0;
	}
	if(severity<=1000)
	{
		// wrecked
		corpsetype=3;
		explode base type BITMAPONLY;
		explode wheels2 type FIRE | EXPLODE_ON_HIT;
		explode wheels1 type FIRE | EXPLODE_ON_HIT;
		explode turret type FIRE | EXPLODE_ON_HIT;
		return 0;
	}
	corpsetype = 4;
	explode wheels1 type SHATTER | EXPLODE_ON_HIT;
	explode wheels2 type SHATTER | EXPLODE_ON_HIT;
	explode base type SHATTER | EXPLODE_ON_HIT;
	explode turret type FIRE | EXPLODE_ON_HIT;
}
