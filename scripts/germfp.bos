#define TAK

piece base, turret_37_1, sleeve_37_1, barrel_37_1, flare_37_1, turret_37_2, sleeve_37_2, barrel_37_2, flare_37_2,
	  turret_20_1, sleeve_20_1, barrel_20_1, flare_20_1, turret_20_2, sleeve_20_2, barrel_20_2, flare_20_2, turret_20_3, sleeve_20_3, barrel_20_3, flare_20_3,
	  boats, ramp, door1, door2, slider_guide, slider1, slider2, slider3, turret, grabber, link,
	  wake1, wake2, wake3, wake4, wake5, flag1, flag2, flag3, prop1, prop2, prop3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Ramp
#define RAMP_OPEN_ANGLE		<30>
#define RAMP_OPEN_SPEED		<10>

#define SLIDER_INIT_ANGLE	<5.5>

#define SLIDER_MOVE_DISTANCE	[-10.16]
#define SLIDER_MOVE_SPEED		SLIDER_MOVE_DISTANCE / 1

#define DOOR_OPEN_SPEED		RAMP_OPEN_SPEED * 3

#define LOAD_DIST			[500]

//********************Turret turn speeds
#define AA37_TURRET_TURN		<30>
#define AA37_TURRET_PITCH		<30>

#define AA20_TURRET_TURN		<45>
#define AA20_TURRET_PITCH		<45>

//*********************Recoil
#define AA37_GUN_RECOIL			[0.4]
#define AA37_GUN_RECOIL_SPEED	[10]
#define AA37_GUN_BACK_SPEED		[0.2]

#define AA20_GUN_RECOIL			[0.4]
#define AA20_GUN_RECOIL_SPEED	[10]
#define AA20_GUN_BACK_SPEED		[0.5]

//********************Flag
#define FLAG_FLAP_PERIOD	500
#define FLAG_FLAP_SPEED		<30>
#define FLAG_FLAP_ANGLE		<15>

// Propellers
#define PROP_SPIN_SPEED		<600>

//*********************Death anim
#define base_LIST_SPEED		<5>
#define base_LIST_ANGLE		<5>

#define RESTORE_PERIOD		2500

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16
#define SIG_AIM4			32
#define SIG_AIM5			64
#define SIG_AIM6			128
#define SIG_AIM7			256
#define SIG_AIM8			512
#define SIG_AIM9			1024
#define SIG_AIM10			2048
#define SIG_LOAD			4096

#define SMOKEPIECE	base

#include "constants.h"
#include "damageSmoke.h"

// effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define XSMALL_MUZZLEFLASH 1024+5
#define XSMALL_MUZZLEDUST 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_MUZZLEFLASH 1024+3
#define SMALL_MUZZLEDUST 1024+4
#define MEDIUMLARGE_MUZZLEFLASH 1024+8
#define MEDIUMLARGE_MUZZLEDUST 1024+9

#define VISIBLE_PERIOD	5000

static-var					MaxSpeed, bRampOpen, bHoldOpen, bMoving, bTooFar, boom_len, boom_heading, boom_pitch, flak20mmBurstRate, bAimAA1, bAimAA2, bAimAA3, bAimAA4, bAimAA5;

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			sleep 500;
		}
		sleep 500;
	}
}

InitTurrets()
//Pre-position turrets
{
	turn turret_37_2 to y-axis <180> now;
	turn turret_20_3 to y-axis <180> now;
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

HideFlares()
{
	hide flare_37_1;
	hide flare_37_2;
	hide flare_20_1;
	hide flare_20_2;
	hide flare_20_3;
}

FlagFlap()
{
	while(TRUE)
	{
		turn flag1 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		turn flag2 to y-axis FLAG_FLAP_ANGLE speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;
		turn flag1 to y-axis (FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		turn flag2 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis (FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;
	}
}

Create()
{
	flak20mmBurstRate=100;
	start-script HideFlares();
	turn slider_guide to x-axis SLIDER_INIT_ANGLE now;
	bRampOpen = FALSE;
	bHoldOpen = FALSE;
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	bAimAA1 = FALSE;
	bAimAA2 = FALSE;
	bAimAA3 = FALSE;
	bAimAA4 = FALSE;
	bAimAA5 = FALSE;
	call-script InitTurrets();
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
	start-script FlagFlap();
}

OpenHold()
{
	set-signal-mask SIG_LOAD|SIG_MOVE;

	if (!bHoldOpen)
	{
		move slider1 to z-axis SLIDER_MOVE_DISTANCE speed SLIDER_MOVE_SPEED;
		wait-for-move slider1 along z-axis;
		hide slider1;
		move slider2 to z-axis SLIDER_MOVE_DISTANCE speed SLIDER_MOVE_SPEED;
		wait-for-move slider2 along z-axis;
		hide slider2;
		move slider3 to z-axis SLIDER_MOVE_DISTANCE speed SLIDER_MOVE_SPEED;
		wait-for-move slider3 along z-axis;
		hide slider3;
		bHoldOpen = TRUE;
	}
}

CloseHold()
{
	set-signal-mask SIG_LOAD|SIG_MOVE;

	if (bHoldOpen)
	{
		show slider3;
		move slider3 to z-axis 0 speed SLIDER_MOVE_SPEED;
		wait-for-move slider3 along z-axis;
		show slider2;
		move slider2 to z-axis 0 speed SLIDER_MOVE_SPEED;
		wait-for-move slider2 along z-axis;
		show slider1;
		move slider1 to z-axis 0 speed SLIDER_MOVE_SPEED;
		wait-for-move slider1 along z-axis;

		bHoldOpen = FALSE;
	}
}

OpenRamp()
{
	var newSpeed;

	set-signal-mask SIG_LOAD|SIG_MOVE;	
	if (!bRampOpen)
	{
		// we are opening the ramp, let's slow down (else we'll have the hold full of water)
		newSpeed = 1;
		set MAX_SPEED to newSpeed;
		turn ramp to x-axis RAMP_OPEN_ANGLE speed RAMP_OPEN_SPEED;
		turn door1 to y-axis <-90> speed DOOR_OPEN_SPEED;
		turn door2 to y-axis <90> speed DOOR_OPEN_SPEED;
		wait-for-turn ramp around x-axis;
		wait-for-turn door1 around y-axis;
		bRampOpen = TRUE;
	}
}

CloseRamp()
{
	set-signal-mask SIG_LOAD|SIG_MOVE;
	if (bRampOpen)
	{
		turn ramp to x-axis 0 speed RAMP_OPEN_SPEED;
		turn door1 to y-axis 0 speed DOOR_OPEN_SPEED;
		turn door2 to y-axis 0 speed DOOR_OPEN_SPEED;
		wait-for-turn ramp around x-axis;
		// now the ramp is closed, we can go full speed again
		set MAX_SPEED to MaxSpeed;
		bRampOpen = FALSE;
	}
}

//Transport stuff
BoomCalc(posxz,posy)
{
	var dxz,dy,lenxz;

	dxz = get PIECE_XZ(turret) - posxz;
	dy = posy - get PIECE_Y(turret);
	lenxz = get XZ_HYPOT(dxz);

	boom_len = get HYPOT(lenxz,dy);
	boom_heading = get XZ_ATAN(dxz);
	boom_pitch = get ATAN(dy,lenxz);
	bTooFar = (boom_len > LOAD_DIST);
}

PositionLink(posxz,posy)
{
	turn turret to y-axis boom_heading now;
	turn grabber to x-axis 0-boom_pitch now;
	move grabber to z-axis boom_len now;
}

ReturnLink()
{
	turn turret to y-axis <0> now;
	turn grabber to x-axis <0> now;
	move grabber to z-axis [0] now;
}

TransportPickup(unitid, fromLua)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
	if ( fromLua != 1 ) {
    	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid));
		if( bTooFar )
		{
			return (FALSE);
		}
		while (!(bRampOpen && bHoldOpen))
		{
			start-script OpenHold();
			start-script OpenRamp();
			sleep 250;
		}
	}
	set BUSY to 1;
	attach-unit unitid to (0-1);
	if ( fromLua != 1 ) {
		sleep 500;
		set BUSY to 0;
		sleep 2500;
		start-script CloseRamp();
		start-script CloseHold();
	}
	set BUSY to 0;
}

TransportDrop(unitid, position)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
    call-script BoomCalc(position,get GROUND_HEIGHT(position));
	if( bTooFar )
	{
		return (1);
	}

	while (!(bRampOpen && bHoldOpen))
	{
		start-script OpenHold();
		start-script OpenRamp();
		sleep 250;
	}

	set BUSY to 1;
	attach-unit unitid to link;
	call-script PositionLink();
	sleep 50;
	drop-unit unitid;
	call-script ReturnLink();
	sleep 1000;
	set BUSY to 0;
	sleep 1500;
	start-script CloseHold();
	start-script CloseRamp();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		emit-sfx 2 from wake4;
		emit-sfx 2 from wake5;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	stop-spin prop1 around z-axis;
	stop-spin prop2 around z-axis;
	stop-spin prop3 around z-axis;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var oldXZ, newXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	start-script CloseRamp();
	start-script CloseHold();
	bMoving = TRUE;
	spin prop1 around z-axis speed PROP_SPIN_SPEED;
	spin prop2 around z-axis speed PROP_SPIN_SPEED;
	spin prop3 around z-axis speed PROP_SPIN_SPEED;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_AIM3|SIG_AIM4|SIG_AIM5|SIG_DEATH;
	sleep RESTORE_PERIOD;

	turn turret_37_1 to y-axis <0> speed AA37_TURRET_TURN;
	turn sleeve_37_1 to x-axis <0> speed AA37_TURRET_PITCH;

	turn turret_37_2 to y-axis <180> speed AA37_TURRET_TURN;
	turn sleeve_37_2 to x-axis <0> speed AA37_TURRET_PITCH;

	turn turret_20_1 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis <0> speed AA20_TURRET_PITCH;
	turn turret_20_2 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis <0> speed AA20_TURRET_PITCH;
	turn turret_20_3 to y-axis <180> speed AA20_TURRET_TURN;
	turn sleeve_20_3 to x-axis <0> speed AA20_TURRET_PITCH;
}

// 37 mm guns - HE (lower priority then AA)
QueryWeapon1(piecenum)
{
	piecenum = flare_37_1;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret_37_1;
}

AimWeapon1(heading, pitch)
{
	if (bAimAA1)
	{
		return FALSE;
	}
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	turn turret_37_1 to y-axis heading speed AA37_TURRET_TURN;
	turn sleeve_37_1 to x-axis (0-pitch) speed AA37_TURRET_PITCH;
	wait-for-turn turret_37_1 around y-axis;
	wait-for-turn sleeve_37_1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
	emit-sfx SMALL_MUZZLEFLASH from flare_37_1;
	emit-sfx SMALL_MUZZLEDUST from flare_37_1;
	move barrel_37_1 to z-axis (0-AA37_GUN_RECOIL) speed AA37_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_37_1 to z-axis 0 speed AA37_GUN_BACK_SPEED;
}

QueryWeapon2(piecenum)
{
	piecenum = flare_37_2;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret_37_2;
}

AimWeapon2(heading, pitch)
{
	if (bAimAA2)
	{
		return FALSE;
	}
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	turn turret_37_2 to y-axis heading speed AA37_TURRET_TURN;
	turn sleeve_37_2 to x-axis (0-pitch) speed AA37_TURRET_PITCH;
	wait-for-turn turret_37_2 around y-axis;
	wait-for-turn sleeve_37_2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
	emit-sfx SMALL_MUZZLEFLASH from flare_37_2;
	emit-sfx SMALL_MUZZLEDUST from flare_37_2;
	move barrel_37_2 to z-axis (0-AA37_GUN_RECOIL) speed AA37_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_37_2 to z-axis 0 speed AA37_GUN_BACK_SPEED;
}

// 37 mm guns - AA
QueryWeapon3(piecenum)
{
	piecenum = flare_37_1;
}

AimFromWeapon3(piecenum)
{
	piecenum = turret_37_1;
}

AimWeapon3(heading, pitch)
{
	bAimAA1 = TRUE;
	signal SIG_AIM3;
	signal SIG_AIM1;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	turn turret_37_1 to y-axis heading speed AA37_TURRET_TURN;
	turn sleeve_37_1 to x-axis (0-pitch) speed AA37_TURRET_PITCH;
	wait-for-turn turret_37_1 around y-axis;
	wait-for-turn sleeve_37_1 around x-axis;
	start-script RestoreTurret();
	bAimAA1 = FALSE;
	return (TRUE);
}

FireWeapon3()
{
	emit-sfx SMALL_MUZZLEFLASH from flare_37_1;
	emit-sfx SMALL_MUZZLEDUST from flare_37_1;
	move barrel_37_1 to z-axis (0-AA37_GUN_RECOIL) speed AA37_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_37_1 to z-axis 0 speed AA37_GUN_BACK_SPEED;
}

QueryWeapon4(piecenum)
{
	piecenum = flare_37_2;
}

AimFromWeapon4(piecenum)
{
	piecenum = turret_37_2;
}

AimWeapon4(heading, pitch)
{
	bAimAA2 = TRUE;
	signal SIG_AIM4;
	signal SIG_AIM2;
	set-signal-mask SIG_AIM4|SIG_DEATH;
	turn turret_37_2 to y-axis heading speed AA37_TURRET_TURN;
	turn sleeve_37_2 to x-axis (0-pitch) speed AA37_TURRET_PITCH;
	wait-for-turn turret_37_2 around y-axis;
	wait-for-turn sleeve_37_2 around x-axis;
	start-script RestoreTurret();
	bAimAA2 = FALSE;
	return (TRUE);
}

FireWeapon4()
{
	emit-sfx SMALL_MUZZLEFLASH from flare_37_2;
	emit-sfx SMALL_MUZZLEDUST from flare_37_2;
	move barrel_37_2 to z-axis (0-AA37_GUN_RECOIL) speed AA37_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_37_2 to z-axis 0 speed AA37_GUN_BACK_SPEED;
}

//-----20mm C38 HE, then AA
QueryWeapon5(piecenum)
{
	piecenum = flare_20_1;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret_20_1;
}

AimWeapon5(heading, pitch)
{
	if (bAimAA3)
	{
		return FALSE;
	}
	signal SIG_AIM5;
	set-signal-mask SIG_AIM5|SIG_DEATH;

	turn turret_20_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_1 around y-axis;
	wait-for-turn sleeve_20_1 around x-axis;
	start-script RestoreTurret();

	return (TRUE);
}

FireWeapon5()
{
}

Shot5(foo)
{
	move barrel_20_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_1;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_1;
	sleep flak20mmBurstRate;
	move barrel_20_1 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

QueryWeapon6(piecenum)
{
	piecenum = flare_20_2;
}

AimFromWeapon6(piecenum)
{
	piecenum = turret_20_2;
}

AimWeapon6(heading, pitch)
{
	if (bAimAA4)
	{
		return FALSE;
	}
	signal SIG_AIM6;
	set-signal-mask SIG_AIM6|SIG_DEATH;

	turn turret_20_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_2 around y-axis;
	wait-for-turn sleeve_20_2 around x-axis;
	start-script RestoreTurret();

	return (TRUE);
}

FireWeapon6()
{
}

Shot6(foo)
{
	move barrel_20_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_2;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_2;
	sleep flak20mmBurstRate;
	move barrel_20_2 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

QueryWeapon7(piecenum)
{
	piecenum = flare_20_3;
}

AimFromWeapon7(piecenum)
{
	piecenum = turret_20_3;
}

AimWeapon7(heading, pitch)
{
	if (bAimAA5)
	{
		return FALSE;
	}
	signal SIG_AIM7;
	set-signal-mask SIG_AIM7|SIG_DEATH;

	turn turret_20_3 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_3 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_3 around y-axis;
	wait-for-turn sleeve_20_3 around x-axis;
	start-script RestoreTurret();

	return (TRUE);
}

FireWeapon7()
{
}

Shot7(foo)
{
	move barrel_20_3 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_3;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_3;
	sleep flak20mmBurstRate;
	move barrel_20_3 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

// AA
QueryWeapon8(piecenum)
{
	piecenum = flare_20_1;
}

AimFromWeapon8(piecenum)
{
	piecenum = turret_20_1;
}

AimWeapon8(heading, pitch)
{
	bAimAA3 = TRUE;
	signal SIG_AIM8;
	signal SIG_AIM5;
	set-signal-mask SIG_AIM8|SIG_DEATH;

	turn turret_20_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_1 around y-axis;
	wait-for-turn sleeve_20_1 around x-axis;
	start-script RestoreTurret();

	bAimAA3 = FALSE;
	return (TRUE);
}

FireWeapon8()
{
}

Shot8(foo)
{
	move barrel_20_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_1;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_1;
	sleep flak20mmBurstRate;
	move barrel_20_1 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

QueryWeapon9(piecenum)
{
	piecenum = flare_20_2;
}

AimFromWeapon9(piecenum)
{
	piecenum = turret_20_2;
}

AimWeapon9(heading, pitch)
{
	bAimAA4 = TRUE;

	signal SIG_AIM9;
	signal SIG_AIM6;
	set-signal-mask SIG_AIM9|SIG_DEATH;

	turn turret_20_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_2 around y-axis;
	wait-for-turn sleeve_20_2 around x-axis;
	start-script RestoreTurret();

	bAimAA4 = FALSE;
	return (TRUE);
}

FireWeapon9()
{
}

Shot9(foo)
{
	move barrel_20_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_2;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_2;
	sleep flak20mmBurstRate;
	move barrel_20_2 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

QueryWeapon10(piecenum)
{
	piecenum = flare_20_3;
}

AimFromWeapon10(piecenum)
{
	piecenum = turret_20_3;
}

AimWeapon10(heading, pitch)
{
	bAimAA5 = TRUE;
	
	signal SIG_AIM10;
	signal SIG_AIM7;
	set-signal-mask SIG_AIM10|SIG_DEATH;

	turn turret_20_3 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_3 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_3 around y-axis;
	wait-for-turn sleeve_20_3 around x-axis;
	start-script RestoreTurret();

	bAimAA5 = FALSE;
	return (TRUE);
}

FireWeapon10()
{
}

Shot10(foo)
{
	move barrel_20_3 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_3;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_3;
	sleep flak20mmBurstRate;
	move barrel_20_3 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<95)
	{
		corpsetype = 1;
		turn base to x-axis base_LIST_ANGLE speed base_LIST_SPEED;
		wait-for-turn base around x-axis;
		explode base type		BITMAPONLY;
		return (TRUE);
	}
	corpsetype = 2;
	explode base type		SHATTER;
	return (TRUE);
}