#include "constants.h"

piece  base, w1, w2, propeller, hmg1_flare, hmg2_flare, lmg1_flare, lmg2_flare, bomb1, bomb2;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, iFear;

#include "air_sharedDefs.h"

#define SMOKEPUFF_GPL_FX 1024+0
#define MG_SHELLCASINGS 1024+1
#define MG_MUZZLEFLASH	1024+2
#define XSMALL_MUZZLEFLASH	1024+3

#define SIG_BANK			2
#define SIG_FEARRECOVERY	4

//tracers
#define MEDIUM_TRACER 	2048+6
#define LARGE_TRACER 	2048+7

#include "air_fearHandling.h"

startengine()
{
	spin propeller around z-axis speed <800> accelerate <200>;
	sleep 400;
	spin propeller around z-axis speed <5000> accelerate <-5000>;
	sleep 200;
	spin propeller around z-axis speed <5000> accelerate <5000>;
	//hide blades;
	set 1024 to 1;
}

stopengine()
{
	//show blades;
	spin propeller around z-axis speed <800> accelerate <-400>;
	sleep 400;
	spin propeller around z-axis speed <50>;
	set 1024 to 0;
}

bankright()
{
	signal SIG_BANK;
	set-signal-mask SIG_BANK;
	turn base to z-axis <-30> speed <30>;
	sleep 100;
	turn base to z-axis <0> speed <30>;	
}

bankleft()
{
	signal SIG_BANK;
	set-signal-mask SIG_BANK;
	turn base to z-axis <30> speed <30>;
	sleep 100;
	turn base to z-axis <0> speed <30>;	
}


activatescr()
{
}

deactivatescr()
{
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;

}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.054945> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.043956>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	set 1024 to 0;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}
AimFromWeapon1(piecenum) 
{
	piecenum = base;
}

QueryWeapon1(piecenum)
{
	piecenum = bomb1;
}

AimWeapon1(heading, pitch)
{
	return (1);
}

FireWeapon1()
{
	hide bomb1;
	return (0);
}
AimFromWeapon2(piecenum) 
{
	piecenum = base;
}

QueryWeapon2(piecenum)
{
	piecenum = bomb2;
}

AimWeapon2(heading, pitch)
{
	return (1);
}

FireWeapon2()
{
	hide bomb2;
	return (0);
}

AimFromWeapon3(piecenum) //Coax fear 
{
	piecenum = base;
}

QueryWeapon3(piecenum)
{
	piecenum = hmg1_flare;
}

AimWeapon3(heading, pitch)
{
	return (1);
}

FireWeapon3()
{
	emit-sfx MEDIUM_TRACER from hmg1_flare;
	emit-sfx MG_MUZZLEFLASH from hmg1_flare;
	emit-sfx MG_SHELLCASINGS from hmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg1_flare;
	emit-sfx MG_SHELLCASINGS from hmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg1_flare;
	emit-sfx MG_SHELLCASINGS from hmg1_flare;
	sleep 67;
	emit-sfx MEDIUM_TRACER from hmg1_flare;
	emit-sfx MG_MUZZLEFLASH from hmg1_flare;
	emit-sfx MG_SHELLCASINGS from hmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg1_flare;
	emit-sfx MG_SHELLCASINGS from hmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg1_flare;
	emit-sfx MG_SHELLCASINGS from hmg1_flare;
	return (0);
}

AimFromWeapon4(piecenum) //Coax fear 
{
	piecenum = base;
}

QueryWeapon4(piecenum)
{
	piecenum = hmg2_flare;
}

AimWeapon4(heading, pitch)
{
	return (1);
}

FireWeapon4()
{
	emit-sfx MEDIUM_TRACER from hmg2_flare;
	emit-sfx MG_MUZZLEFLASH from hmg2_flare;
	emit-sfx MG_SHELLCASINGS from hmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg2_flare;
	emit-sfx MG_SHELLCASINGS from hmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg2_flare;
	emit-sfx MG_SHELLCASINGS from hmg2_flare;
	sleep 67;
	emit-sfx MEDIUM_TRACER from hmg2_flare;
	emit-sfx MG_MUZZLEFLASH from hmg2_flare;
	emit-sfx MG_SHELLCASINGS from hmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg2_flare;
	emit-sfx MG_SHELLCASINGS from hmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from hmg2_flare;
	emit-sfx MG_SHELLCASINGS from hmg2_flare;
	return (0);
}

AimFromWeapon5(piecenum) //Coax fear 
{
	piecenum = base;
}

QueryWeapon5(piecenum)
{
	piecenum = lmg1_flare;
}

AimWeapon5(heading, pitch)
{
	return (1);
}

FireWeapon5()
{
	emit-sfx MEDIUM_TRACER from lmg1_flare;
	emit-sfx MG_MUZZLEFLASH from lmg1_flare;
	emit-sfx MG_SHELLCASINGS from lmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg1_flare;
	emit-sfx MG_SHELLCASINGS from lmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg1_flare;
	emit-sfx MG_SHELLCASINGS from lmg1_flare;
	sleep 67;
	emit-sfx MEDIUM_TRACER from lmg1_flare;
	emit-sfx MG_MUZZLEFLASH from lmg1_flare;
	emit-sfx MG_SHELLCASINGS from lmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg1_flare;
	emit-sfx MG_SHELLCASINGS from lmg1_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg1_flare;
	emit-sfx MG_SHELLCASINGS from lmg1_flare;
	return (0);
}

AimFromWeapon6(piecenum) //Coax fear 
{
	piecenum = base;
}

QueryWeapon6(piecenum)
{
	piecenum = lmg2_flare;
}

AimWeapon6(heading, pitch)
{
	return (1);
}

FireWeapon6()
{
	emit-sfx MEDIUM_TRACER from lmg2_flare;
	emit-sfx MG_MUZZLEFLASH from lmg2_flare;
	emit-sfx MG_SHELLCASINGS from lmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg2_flare;
	emit-sfx MG_SHELLCASINGS from lmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg2_flare;
	emit-sfx MG_SHELLCASINGS from lmg2_flare;
	sleep 67;
	emit-sfx MEDIUM_TRACER from lmg2_flare;
	emit-sfx MG_MUZZLEFLASH from lmg2_flare;
	emit-sfx MG_SHELLCASINGS from lmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg2_flare;
	emit-sfx MG_SHELLCASINGS from lmg2_flare;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from lmg2_flare;
	emit-sfx MG_SHELLCASINGS from lmg2_flare;
	return (0);
}

Killed(severity, corpsetype)
{
	corpsetype = 1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode w2 type SHATTER;
}