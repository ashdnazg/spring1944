#define TAK

piece base, turret1, gun1, flare1_1, flare1_2, turret2, gun2, flare2_1, flare2_2,
	  torp1, torp2, wake1, wake2, wake3,
	  flag1, flag2, flag3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Turret turn speeds
#define MG_TURRET_TURN			<30>
#define MG_TURRET_PITCH			<45>

//*********************Death anim
#define HULL_LIST_SPEED		<10>
#define HULL_LIST_ANGLE		<15>

//*********************Cruise mode
#define CRUISE_MODE_ANGLE	<-5>
#define CRUISE_MODE_RAISE_SPEED	<2>
#define CRUISE_MODE_START_DIVIDER	4
#define CRUISE_MODE_START_MULTIPLIER	3
#define CRUISE_MODE_PERIOD	250


#define RESTORE_PERIOD		2500

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16
#define SIG_AIM4			32

// tracers
#define MEDIUM_TRACER 	2048+4

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define XSMALL_MUZZLEFLASH 1024+8
#define XSMALL_MUZZLEDUST 1024+9

#define SMOKEPIECE	base

#include "constants.h"
#include "damageSmoke.h"

//********************Flag
#define FLAG_FLAP_PERIOD	500
#define FLAG_FLAP_SPEED		<30>
#define FLAG_FLAP_ANGLE		<15>

static-var					CruiseTriggerSpeed, MaxSpeed, bMoving, flare1, flare2;

FlagFlap()
{
	while(TRUE)
	{
		turn flag2 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis FLAG_FLAP_ANGLE speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;

		turn flag2 to y-axis FLAG_FLAP_ANGLE speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;
	}
}

InitTurrets()
//Pre-position turrets
{
	turn turret1 to y-axis <180> now;
	turn turret2 to y-axis <180> now;
	flare1 = TRUE;
	flare2 = TRUE;
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

CruiseControl()
{
	var CurrentSpeed;
	set-signal-mask SIG_DEATH;
	while(TRUE)
	{
		CurrentSpeed = get CURRENT_SPEED;
		if(CurrentSpeed > CruiseTriggerSpeed)
		{
			turn base to x-axis CRUISE_MODE_ANGLE speed CRUISE_MODE_RAISE_SPEED;		
		} else
		{
			turn base to x-axis <0> speed CRUISE_MODE_RAISE_SPEED;
		}
		sleep CRUISE_MODE_PERIOD;
	}
}

HideFlares()
{
	hide flare1_1;
	hide flare1_2;
	hide flare2_1;
	hide flare2_2;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var oldXZ, newXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

Create()
{
	start-script HideFlares();
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	CruiseTriggerSpeed = MaxSpeed * CRUISE_MODE_START_MULTIPLIER / CRUISE_MODE_START_DIVIDER;
	call-script InitTurrets();
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script FlagFlap();
	start-script CruiseControl();
	start-script StopCatcher();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	bMoving = TRUE;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_AIM3|SIG_AIM4|SIG_DEATH;
	sleep RESTORE_PERIOD;

	turn turret1 to y-axis <180> speed MG_TURRET_TURN;
	turn gun1 to x-axis <0> speed MG_TURRET_PITCH;
	turn turret2 to y-axis <180> speed MG_TURRET_TURN;
	turn gun2 to x-axis <0> speed MG_TURRET_PITCH;
}

QueryWeapon1(piecenum)
{
	piecenum = torp1;
}

AimFromWeapon1(piecenum)
{
	piecenum = torp1;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
	sleep 200;
}

QueryWeapon2(piecenum)
{
	piecenum = torp2;
}

AimFromWeapon2(piecenum)
{
	piecenum = torp2;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
	sleep 200;
}

QueryWeapon3(piecenum)
{
	if(flare1)
	{
		piecenum = flare1_1;
	} else
	{	piecenum = flare1_2;
	}
}

AimFromWeapon3(piecenum)
{
	piecenum = turret1;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	turn turret1 to y-axis heading speed MG_TURRET_TURN;
	turn gun1 to x-axis (0-pitch) speed MG_TURRET_PITCH;
	wait-for-turn turret1 around y-axis;
	wait-for-turn gun1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon3()
{
	return;
}

Shot3(foo)
{
	if(flare1)
	{
		emit-sfx MG_MUZZLEFLASH from flare1_1;
	} else {
		emit-sfx MG_MUZZLEFLASH from flare1_2;
	}
	flare1 = !flare1;
}

QueryWeapon4(piecenum)
{
	if(flare2)
	{
		piecenum = flare2_1;
	} else
	{	piecenum = flare2_2;
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = turret2;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM4;
	set-signal-mask SIG_AIM4|SIG_DEATH;
	turn turret2 to y-axis heading speed MG_TURRET_TURN;
	turn gun2 to x-axis (0-pitch) speed MG_TURRET_PITCH;
	wait-for-turn turret2 around y-axis;
	wait-for-turn gun2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon4()
{
	return;
}

Shot4(foo)
{
	if(flare2)
	{
		emit-sfx MG_MUZZLEFLASH from flare2_1;
	} else {
		emit-sfx MG_MUZZLEFLASH from flare2_2;
	}
	flare2 = !flare2;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<99)
	{
		corpsetype = 1;
		turn base to z-axis HULL_LIST_ANGLE speed HULL_LIST_SPEED;
		wait-for-turn base around z-axis;
		explode base type		BITMAPONLY;
		return (TRUE);
	}
	corpsetype = 2;
	explode base type		SHATTER;
	explode turret1 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode turret2 type	FALL|EXPLODE_ON_HIT|FIRE;
	return (TRUE);
}