#define TAK //this is a TAK script

#include "constants.h"

piece  torso, flare, pelvis, rthigh, lthigh, lleg, rleg, rfoot, 
		lfoot, luparm, lloarm, ground, gun, ruparm, rloarm, head;
		

//signals to handle control of..everything
#define SIG_RUN					8
#define SIG_AIMRUN				16
#define SIG_CRAWL				32
#define SIG_AIM1				64
#define SIG_AIM2				128 //no inf has more than 2 weapons except commando, something of a special exception
#define SIG_PINNEDCTRL			256
#define SIG_FEARRECOVERY		512
#define SIG_RESTOREFROMCRAWL	1024
#define SIG_IDLE				2048

/*
Defs that are shared among inf
the numbers that control pinned levels, how scary various weapons are, ect.
*/
#include "inf_sharedDefs.h"

//individual unit definitions
#define SMG
#define WEAPON_GRENADE
#define FLAGKILLER
#define GUN_QUERY_PIECENUM		flare
#define IdleDelay				10000
#define RestoreDelay			5000
#define StanceNumber			2 //number of WeaponReady stances
#define BurstRate				50 //marginally less than the actual so there's visible movement

/* --Var defs:
-----Boolean
---
bAiming - is the unit currently aiming at anything? or was it recently aiming at anything (time controlled by restoreafterdelay)
	Controls: timing of idle animations, the usage of AimRunControl over RunControl
	Set by: Aimweapon, unset over time by AimRunControl and StartMoving/StopMoving
---
bNading - is the unit currently in the process of throwing a grenade?
	Controls: locks out weaponready, and X
	Set by: fireweapon of the nade script, unset by same at the end
---
bMoving - is the unit currently moving? 
	Controls: various animations.
	Set by: StartMoving, unset by StopMoving
---
-----Integer
---
iState - what the unit is currently doing //todo: add states for being in a transport, update killed and aimweapon accordingly
	Controls: which aiming anim to use, among others.
	 Set by: everything that changes the state of the unit. *Control, HitbyWeapon, RestoreFromCrawl, ect
	  Values:
		standing idle - 0
		standing at attention - 1
		standing aiming rifle/SMG - 2
		kneeling aiming rifle/SMG - 3
		-		
		running - 4
		running aiming - 5
		-
		prone 'idle' - 6
		prone aiming - 7
		crawling - 8
		-
		pinned - 9 
---
iFear - how 'afraid' unit currently is. 
	Controls: if unit is crawling/prone or standing.
	Controls: pinned status.
	 Set by: increased by HitbyWeapon on impact of suitable weapon, decreased by FearRecovery
	  Values: 0-20
	  iFear = 0-14 = prone/crawling
	  iFear >= 15 = pinned, unable to fire or crawl.
---
	
*/
#ifndef WEAPON_GRENADE
static-var bAiming, bMoving, iState, iFear, iSpeed;
#endif
#ifdef WEAPON_GRENADE
static-var bAiming, bMoving, iState, iFear, bNading, iSpeed;
#endif

//FX definitions
	//frivolous
#define BLOOD_SM 1024+1
#define BLOOD_LG 1024+2
#define CLIP 1024+3
#define SHELL 1024+4
#define PISS 1024+5
#define CIG 1024+6
#define MUZZLEFLASH 1024+7
//end FX

//aiming poses
#include "inf_poses.h"

//weapon ready - split out so I can easily update the number of poses
#include "inf_weaponReady.h"

//Idle animations.
#include "inf_idleAnims.h"

//All of the animations concerning movement - running, aimrunning, crawling, standing, going prone.
#include "inf_movementAnims.h"
		

//All the loops that handle the animations and state changes concerning movement.
#include "inf_movementControls.h"

//Fead handling (HitByWeapon, FearRecovery, TakeCover, PinnedControl, Pinned, RestoreAfterCover)
#include "inf_fearHandling.h"

//transport state handling
#include "inf_transportHandling.h"

StartMoving()
{
	signal SIG_IDLE;
	bAiming = 0;
	bMoving = 1;
}

StopMoving()
{
	signal SIG_IDLE;
	bAiming = 0;
	bMoving = 0;
}

Create()
{
	hide GUN_QUERY_PIECENUM; //thanks to gnome for this inspired idea. no more stupid showing flares...
	bMoving = 0;
	bAiming = 0;
	#ifdef WEAPON_GRENADE
	bNading = 0;
	#endif
	iState = 1;
	iFear = 0;
	iSpeed = get MAX_SPEED;///65536)
	start-script WeaponReady();
	start-script RunControl();
}

RestoreAfterDelay()
{
	sleep RestoreDelay;
//	bAiming=0;	
	if (iFear > 0) start-script CrawlControl();
	if (iFear <= 0)
		{
		start-script RunControl();
		}
}

//start weapons
/*
Primary weapon. 
States: crawling/prone, running.
Killed by:
Grenade aiming
PinnedControl
*/

AimFromWeapon1(piecenum)
{
	piecenum = torso;
}

QueryWeapon1(piecenum)
{
	piecenum = gun;
}

AimWeapon1(heading, pitch)
{

	signal SIG_AIM2;
	signal SIG_AIM1;
	set-signal-mask SIG_AIM2;
	if (bMoving || iState==9) return 0;
	//turn pelvis to y-axis heading - <30> now;
//	if (NadeReloading==1) return (0); //slow nades while prone

	return (1);
}

NadeAnim()
{
	hide gun;
	Turn torso to x-axis <-10> speed <60>;
	Turn torso to y-axis <-20> speed <120>;
	turn luparm to x-axis <0> speed <120>;
	Turn luparm to y-axis <-20> speed <120>;
	Turn luparm to z-axis <-80> speed <450>;

	Turn lloarm to x-axis <-20> speed <120>;
	Turn lloarm to y-axis <0> speed <120>;
	Turn lloarm to z-axis <0> speed <120>;

	Turn ruparm to x-axis <20> speed <120>;
	Turn ruparm to y-axis <0> speed <120>;
	Turn ruparm to z-axis <55> speed <300>;

	Turn rloarm to x-axis <-35> speed <450>;
	turn rloarm to y-axis <0> speed <450>;
	Turn rloarm to z-axis <85> speed <450>;

	/*Turn rthigh to x-axis <20> speed <120>;
	Turn rthigh to y-axis <0> speed <120>;
	Turn rthigh to z-axis <0> speed <120>;

	Turn rleg to x-axis <45> speed <240>;
	Turn rleg to y-axis <0> speed <240>;
	Turn rleg to z-axis <0> speed <240>;

	Turn lthigh to x-axis <-65> speed <360>;
	Turn lthigh to y-axis <0> speed <360>;
	Turn lthigh to z-axis <0> speed <360>;

	Turn lleg to x-axis <50> speed <270>;
	Turn lleg to y-axis <0> speed <270>;
	Turn lleg to z-axis <0> speed <270>; //end of frame one*/

	sleep 300;
	Turn torso to x-axis <0> speed <150>;//start of frame two
	Turn luparm to y-axis <50> speed <360>;
	Turn luparm to z-axis <-55> speed <360>;
	Turn lloarm to x-axis <-40> speed <120>;
	Turn ruparm to x-axis <60> speed <360>;
	Turn ruparm to y-axis <35> speed <360>;
	Turn ruparm to z-axis <70> speed <360>;
	turn rloarm to y-axis <15> speed <360>;
//	Turn rthigh to x-axis <10> speed <360>;
	//Turn rleg to x-axis <25> speed <360>;
	//Turn lthigh to x-axis <0> speed <360>;
	//Turn lleg to x-axis <0> speed <360>; //end of frame two

	sleep 300;
	Turn torso to y-axis <0> speed <60>;//start of frame three (resetting model)
	Turn luparm to z-axis <0> speed <300>;
	Turn lloarm to x-axis <0> speed <300>;
	Turn ruparm to y-axis <0> speed <300>;
	Turn ruparm to z-axis <0> speed <300>;
	Turn rloarm to z-axis <0> speed <300>;
	sleep 300;
//	Turn rthigh to x-axis <0> speed <360>;
//	Turn rleg to x-axis <0> speed <360>;
}

FireWeapon1(heading) //grenaaaaade!
{
	if (iState<6)
	{
	bNading=1;
	call-script NadeAnim();
	bNading = 0;
	}
	if (iState>=6)
	{
	bNading=1;
	turn luparm to x-axis <0> speed <300>;
	turn luparm to y-axis <80> speed <300>;
	turn luparm to z-axis <0> speed <300>;
	wait-for-turn luparm around x-axis;
	turn luparm to x-axis <-160> speed<600>;
	wait-for-turn luparm around x-axis;	
	turn luparm to x-axis <-140> speed <360>;
	turn luparm to y-axis <0> speed <360>;
	turn luparm to z-axis <35> speed <360>;
	wait-for-turn luparm around x-axis;
	wait-for-turn luparm around y-axis;
	wait-for-turn luparm around z-axis;
	/*	nadeReloading=1;
		sleep NadePenalty;
		nadeReloading=0;*/
	bNading=0;
	return (1);
	}
	return (0);
}

#include "inf_Death.h"