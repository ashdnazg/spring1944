
piece base, stand, turret, sleeve, barrel, flare, pelvis;
 
static-var iState, iFear, lasthit, aim1, reloading, isRangeAdjusted, originalRange, shotCount;

#include "AA_sharedDefs.h"
#include "constants.h"

// Signal definitions
#define SIG_AIM					2
#define SIG_FEARRECOVERY		4
//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define XSMALL_MUZZLEFLASH	1024+7
#define XSMALL_MUZZLEDUST	1024+8

// definitions for turret movement - will probably use this later with a more advanced anim that requires redeploy for > arc traverse
#define RELOAD		300 // time in milliseconds between shots
#define TURR_TRAVERSE	<900>
#define TURR_ELEVATE	<780>
#define TURR_ARC		<35>

// definitions for weapons behaviour
#define RECOIL		[-1.5] // distance to recoil the gun
#define RETURN_SPEED	[10] // speed at which the barrel returns
#define BURST1		3
#define BURST2		2

#define RANGE_INACCURACY_PERCENT	10

//tracers
#define LARGE_TRACER		2048+2
#define TRACER_PER_X_SHOTS	3

//poses
#define CREW_SUPRESSED\
turn pelvis to x-axis <160> now;\
turn pelvis to z-axis <-60> now;

#define CREW_DEPLOY\
turn pelvis to x-axis <0> now;\
turn pelvis to z-axis <0> now;

#include "rangefinder.h"
Create()
{
	hide flare;
	reloading = FALSE;
	aim1 = FALSE;
	shotCount=0;
	set ACTIVATION to TRUE;
	originalRange = get WEAPON_RANGE(1);
	isRangeAdjusted = FALSE;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

TakeCover()
{
set-signal-mask 0;
	if (iState < 6)
	{
	
				iState=6;
				CREW_SUPRESSED

	}
		SET ARMORED to TRUE;

		sleep 100;
		return(0);
}

RestoreAfterCover() //get up out of the dirt. also controls going into pinned mode.
{
	

		if (iFear <=0 && iState>=6)
		{	
			iFear=0;
			CREW_DEPLOY
				iState=1;
				SET ARMORED to FALSE;
				set MAX_SPEED to [0.5];
		
		}
		return (1);
		sleep 100;
	}


FearRecovery() 
{ 
signal SIG_FEARRECOVERY;
set-signal-mask SIG_FEARRECOVERY;
	
     while(iFear > 0) 
        { 
	        sleep RecoverRate; 
			iFear = iFear - RecoverConstant; 
        } 
	start-script RestoreAfterCover();   
	return (1); 
 
return (1); 
}


HitByWeaponId(z,x,id,damage)
{	
	if (id == 999) { // binocs
		return 0;
	}
	if (Id<=300 || Id>700)
	{
	iFear = iFear + 1;
		if (iState < 6) 
		{
		call-script TakeCover();
		//sleep initialDelay;
		}
	start-script FearRecovery();
	return 100;
	}
	
	if (Id==301) iFear = iFear + LittleFear;
	if (Id==401) iFear = iFear + MedFear;
	if (Id==501) iFear = iFear + BigFear;
	if (Id==601) iFear = iFear + MortalFear;
	if (iFear > FearLimit) iFear = FearLimit; // put this line AFTER increasing iFear var		
	if (iState < 6)
	{
	call-script TakeCover();
	//sleep initialDelay;
	}
	start-script FearRecovery();
	return (0); 
}

luaFunction(arg1)
{
 arg1 = iFear;
}

ResetRangefinder1(sleepTime)
{
	set-signal-mask SIG_AIM;
	//get PRINT(sleepTime);
	sleep sleepTime;
	call-script RangefinderReset(1);
}

// Weapon 1 - AA Ammo
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = barrel;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (iState>=6) return 0;
	aim1 = TRUE;
		// call the rangefinder
	if(!isRangeAdjusted)
	{
		call-script RangeFinder(1);
		start-script ResetRangefinder1(get WEAPON_RELOADTIME(1));
	}
	turn turret to y-axis heading speed TURR_TRAVERSE;
	wait-for-turn turret around y-axis;
	turn sleeve to x-axis <0.000000> - pitch speed TURR_ELEVATE;
	wait-for-turn sleeve around x-axis;
	aim1 = FALSE;	
	return 1;
}

FireWeapon1()
{
	// barrel recoil
//	emit-sfx LARGE_TRACER from flare;
	sleep 50;
/*	emit-sfx LARGE_TRACER from flare;
	var i;
	for (i=0; i < BURST1; ++i) 
	{
		emit-sfx XSMALL_MUZZLEFLASH from flare;
		emit-sfx XSMALL_MUZZLEDUST from flare;
		move barrel to z-axis RECOIL now;
		sleep 50;
		move barrel to z-axis 0 speed RETURN_SPEED;
		sleep 200;
	}*/
	sleep 750;
	sleep 400;
	// signal the rangefinder we need a new range reading
	isRangeAdjusted = FALSE;
	call-script RangefinderReset();
	start-script Reload(); // start reload timer after firing
}

Shot1(just_a_zero)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	++shotCount;
	if(shotCount>=TRACER_PER_X_SHOTS)
	{
		shotCount=0;
		emit-sfx LARGE_TRACER from flare;
	}
	move barrel to z-axis RECOIL now;
	sleep 50;
	move barrel to z-axis 0 speed RETURN_SPEED;
}

// Weapon 2 - HE Ammo
QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = barrel;
}

AimWeapon2(heading, pitch)
{
	if (aim1) return 0;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (iState>=6) return 0;
	turn turret to y-axis heading speed TURR_TRAVERSE;
	wait-for-turn turret around y-axis;
	turn sleeve to x-axis <0.000000> - pitch speed TURR_ELEVATE;
	wait-for-turn sleeve around x-axis;	
	return 1;
}

FireWeapon2()
{
	// barrel recoil
	/*emit-sfx LARGE_TRACER from flare;
	var i;
	for (i=0; i < BURST2; ++i) 
	{
		emit-sfx XSMALL_MUZZLEFLASH from flare;
		emit-sfx XSMALL_MUZZLEDUST from flare;
		move barrel to z-axis RECOIL now;
		sleep 50;
		move barrel to z-axis 0 speed RETURN_SPEED;
		sleep 300;
	}*/
	sleep 700;
	sleep 200;
	start-script Reload(); // start reload timer after firing
}

Shot2(just_a_zero)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	++shotCount;
	if(shotCount>=TRACER_PER_X_SHOTS)
	{
		shotCount=0;
		emit-sfx LARGE_TRACER from flare;
	}
	move barrel to z-axis RECOIL now;
	sleep 50;
	move barrel to z-axis 0 speed RETURN_SPEED;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 || lasthit>1 && lasthit<10)
	{
		corpsetype = 1;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	if(severity <= 999)
	{
		corpsetype = 1;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	}
	corpsetype = 2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;	
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
}