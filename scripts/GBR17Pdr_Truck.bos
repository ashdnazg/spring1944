#define TA			// This is a TA script

//#include "sfxtype.h"
#include "constants.h"

piece  base, body, wheel1, wheel2, carriage, wheel3;
 
static-var gunTowHeading, isTowed, normalSpeed;

// *** added by Yuritch
static-var isMoving, curTrailerDir, oldMainDir;
#define TRAILER_CHECK_PERIOD	30
#define TRAILER_TURN_SPEED		<0.5>
#define MAX_DELTA_ANGLE			<70>
#define MIN_DELTA_ANGLE			1.1*TRAILER_TURN_SPEED
#define MAX_VEH_TURN_ANGLE		<5>

#define SIG_DEATH				1
// ***

// Signal definitions
#define SIG_TOW		64

// definitions for wheels
#define WHEEL_SPIN		<100>
#define WHEEL_ACCEL		<30>

// *** added by Yuritch
TrailerCheck()
{
	set-signal-mask SIG_DEATH;
	var deltaAngle, mainAngle;
	while(TRUE)
	{
		sleep TRAILER_CHECK_PERIOD;
		if(isMoving)
		{
			mainAngle = get HEADING;
			// check the vehicle itself - if it turns fast, apply the correction to trailer angle immediately
			deltaAngle = mainAngle - oldMainDir;
			if((get ABS(deltaAngle)) > MAX_VEH_TURN_ANGLE)
			{
				curTrailerDir = curTrailerDir - deltaAngle;
			}
			oldMainDir = mainAngle;
			// now proceed with the trailer
			deltaAngle = curTrailerDir - mainAngle;
			// normalize the angle
			if(deltaAngle > <180>)
			{
				deltaAngle = deltaAngle - <360>;
			}
			if(deltaAngle < <-180>)
			{
				deltaAngle = deltaAngle + <360>;
			}
			// get PRINT(mainAngle, curTrailerDir, deltaAngle, MAX_DELTA_ANGLE);
			if((get ABS(deltaAngle)) < MIN_DELTA_ANGLE)
			{
				deltaAngle = 0;
				curTrailerDir = mainAngle;
			}
			if(deltaAngle > MAX_DELTA_ANGLE)
			{
				curTrailerDir = mainAngle + MAX_DELTA_ANGLE;
			}
			if(deltaAngle < (0-MAX_DELTA_ANGLE))
			{
				curTrailerDir = mainAngle - MAX_DELTA_ANGLE;
			}
			// now turn the trailer
			if(deltaAngle > 0)
			{
				curTrailerDir = curTrailerDir - TRAILER_TURN_SPEED;
			}
			if(deltaAngle < 0)
			{
				curTrailerDir = curTrailerDir + TRAILER_TURN_SPEED;
			}
			turn carriage to y-axis (0 - (mainAngle - curTrailerDir)) now;
		}
	}
}

TrailerInit()
{
	curTrailerDir = get HEADING;
	oldMainDir = curTrailerDir;
}
// ***

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


StartMoving()
{
	set ACTIVATION to 1;
	/*emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;*/
	spin wheel1 around x-axis speed <350.082418>;
	spin wheel2 around x-axis speed <350.082418>;
	spin wheel3 around x-axis speed <350.082418>;
	isMoving = TRUE;
}

StopMoving()
{
	set ACTIVATION to 0;
	stop-spin wheel1 around x-axis decelerate <100.000000>;
	stop-spin wheel2 around x-axis decelerate <100.000000>;
	stop-spin wheel3 around x-axis decelerate <100.000000>;
	isMoving = FALSE;
}

Create()
{
//	spin tow_point around y-axis speed <100>;
	start-script SmokeUnit();
	start-script TrailerInit();
	start-script TrailerCheck();
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if( severity <= 999 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
		
		return (0);
	}
	corpsetype = 1;
	explode wheel1 type SHATTER | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	explode carriage type SHATTER | EXPLODE_ON_HIT;
	explode base type SHATTER;
}
