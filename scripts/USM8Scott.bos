#include "STANDARD_COMMANDS_GPL.h" // Thank you Argh

piece  base, turret, mantlet, barrel, flare, coaxflare, aaref, aaturret, aagun, aaflare, exhaust, hullmg, frontwheel, rearwheel, wheel1, wheel2, wheel3, wheel4, tracks1, tracks2;
 
static-var  restore_delay, rock, aim2, reloading, mainHead, bMoving, treadnum, gunaiming, MGAiming, FearOk;

// Signal definitions
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // Coax MG
#define SIG_AIM_3	8 // AA MG

// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 turret
#define SMOKEPIECE3 mantlet
#define SMOKEPIECE4 exhaust

#include "SmokeUnit_GPL.h" // Thanks again to Argh

//hiding FX emit points
#define FX_HIDE\
	hide flare;\
	hide aaflare;\
	hide coaxflare;\

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for wheels
#define WHEEL_SPIN		<600>
#define WHEEL_ACCEL		<150>

// definitions for turret movement
#define TURR_TRAVERSE	<30>
#define TURR_ELEVATE	<13>
#define AA_TRAVERSE		<225>
#define AA_ELEVATE		<150>
#define COAX_ARC		<15>

// definitions for weapons behaviour
#define RELOAD		3500 // time in milliseconds between shots
#define RECOIL		[-2] // distance to recoil the gun
#define RETURN_SPEED	[10] // speed at which the barrel returns

// definitions for HitWeapId_S44
#define ARMOUR		4275
#include "HitWeapId_S44.h"

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define MEDIUM_MUZZLEFLASH 1024+8
#define MEDIUM_MUZZLEDUST 1024+9

// tracers
#define MEDIUM_TRACER 	2048+4

treads() 
{ 
   while( TRUE ) 
   { 
        if(bMoving) 
           { 
              if(treadnum == 0) 
              {             
              hide tracks2; 
              show tracks1; 
              } 
            if(treadnum == 1) 
            { 
            hide tracks1; 
            show tracks2; 
			}
            treadnum = !treadnum; 
         } 
      sleep 90; 
   } 
}

Create()
{
	FX_HIDE
	// init vars
	rock = FALSE;
	aim2 = FALSE;
	reloading = FALSE;
	treadnum=0;
	// start continuous scripts
	start-script SmokeUnit_GPL();
	start-script treads();
}

StartMoving()
{
	bMoving = TRUE;
	set ACTIVATION to 1;
	spin frontwheel around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin rearwheel around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel1 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel2 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel3 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel4 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
}

StopMoving()
{
	bMoving = FALSE;
	set ACTIVATION to 0;
	stop-spin frontwheel around x-axis;
 	stop-spin rearwheel around x-axis;
	stop-spin wheel1 around x-axis;
 	stop-spin wheel2 around x-axis;
 	stop-spin wheel3 around x-axis;
 	stop-spin wheel4 around x-axis;
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <60>;
	turn barrel to x-axis <0.000000> speed <10>;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	if (aim2) return 0; // don't aim weap1 if aiming AP
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	GunAiming=1;
	mainHead = heading;
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn mantlet to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn mantlet around x-axis;
	
	start-script RestoreAfterDelay();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	GunAiming=0;
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	FearOk=1;
	emit-sfx MEDIUM_MUZZLEFLASH from flare;
	emit-sfx MEDIUM_MUZZLEDUST from flare;
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 200;
	move barrel to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

AimFromWeapon4(piecenum) //Main gun HE fear
{
	piecenum = turret;
}

QueryWeapon4(piecenum)
{
	piecenum = flare;
}

AimWeapon4(heading, pitch)
{
	if (FearOk==1)
	{
	wait-for-turn turret around y-axis;
	return (1);
	}
	return 0;
}

FireWeapon4()
{
FearOk=0;
return (0);
}

// Weapon 2 - AA MG
QueryWeapon2 (piecenum)
	{
	piecenum = aaFlare;
	}

AimFromWeapon2 (piecenum)
	{
	piecenum = aaGun;
	}

AimWeapon2(heading, pitch)
	{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;

	// thanks to Fang and zwzsg for this!
	turn aaTurret to y-axis heading speed AA_TRAVERSE; 
	turn aaGun to x-axis 0 - pitch speed AA_ELEVATE; 
	wait-for-turn aaTurret around y-axis; 
	wait-for-turn aaGun around x-axis;
	
	start-script RestoreAfterDelay();
	return (1);
	}

FireWeapon2()
	{
	rock = FALSE;
	
	// TODO: nice SFX
	emit-sfx MEDIUM_TRACER from aaflare;
	emit-sfx MG_MUZZLEFLASH from aaflare;
	sleep 109;
	emit-sfx MG_MUZZLEFLASH from aaflare;
	sleep 109;
	emit-sfx MG_MUZZLEFLASH from aaflare;
	sleep 109;
	emit-sfx MEDIUM_TRACER from aaflare;
	emit-sfx MG_MUZZLEFLASH from aaflare;
	sleep 109;
	emit-sfx MG_MUZZLEFLASH from aaflare;
	sleep 109;
	emit-sfx MG_MUZZLEFLASH from aaflare;
	emit-sfx MEDIUM_TRACER from aaflare;
	sleep 109;
	
	return(0);
	}

AimFromWeapon3(piecenum) //bulletproof effect
{
	piecenum = base;
}

QueryWeapon3(piecenum)
{
	piecenum = base;
}

AimWeapon3(heading, pitch)
{
return (1);
}

FireWeapon3()
{
return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
		explode wheel4 type SHATTER | EXPLODE_ON_HIT;
		return (0);
	}
	if( severity <= 250 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
		explode wheel4 type SHATTER | EXPLODE_ON_HIT;
	}
	if(severity <= 1000)
	{
		corpsetype = 2;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
	}
	corpsetype = 2;
	explode turret type EXPLODE_ON_HIT | FIRE | FALL;
	explode barrel type SHATTER;
	explode frontwheel type SHATTER;
	explode rearwheel type SHATTER;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	explode wheel3 type SHATTER | EXPLODE_ON_HIT;
}

