#define TA			// This is a TA script

#include "constants.h"

piece  base, crane, front_wheels, rear_wheels, spare;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

#define SIG_ACTIVATE	1;

StartMoving()
{
	spin front_wheels around x-axis speed <300.000000>;
	spin rear_wheels around x-axis speed <300.000000>;
}

StopMoving()
{
	stop-spin front_wheels around x-axis;
	stop-spin rear_wheels around x-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	Static_Var_1 = 0;
	start-script SmokeUnit();
}

Activate()
{
	signal SIG_ACTIVATE;
	set ACTIVATION to 1;
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set ACTIVATION to 0;
}

StartBuilding(heading, pitch)
{
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = base;
}

TargetHeading(newHeading)
{
	Static_Var_1 = 0 - newHeading;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned
		corpsetype = 1;
	
		return (0);
	}
	if(severity<=250)
	{
		// burning
		corpsetype=2;
		explode base type BITMAPONLY;
		explode front_wheels type FIRE | EXPLODE_ON_HIT;
		return 0;
	}
	if(severity<=1000)
	{
		// burning
		corpsetype=3;
		explode base type BITMAPONLY;
		explode front_wheels type FIRE | EXPLODE_ON_HIT;
		explode rear_wheels type FIRE | EXPLODE_ON_HIT;
		explode crane type FIRE | EXPLODE_ON_HIT;
		return 0;
	}
	corpsetype = 4;
	explode front_wheels type SHATTER | EXPLODE_ON_HIT;
	explode rear_wheels type SHATTER | EXPLODE_ON_HIT;
	explode base type SHATTER | EXPLODE_ON_HIT;
}
