#define TAK			// This is a TA script

#include "constants.h"

piece  base, spare, front_wheels, rear_wheels, turret, sleeve, barrel, flare;
 
static-var RestoreDelay, reloading, aim2, bMoving;

// Signal definitions
#define SIG_MOVE			1
#define SIG_AIM				2

#define TURRET_TURN_SPEED	<15>
#define TURRET_PITCH_SPEED	<10>

#define RECOIL			[-1.5] // distance to recoil the gun
#define RECOIL_SPEED	[10]
#define RETURN_SPEED	[2] // speed at which the barrel returns

#define RELOAD			10000

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_MUZZLEFLASH 1024+8
#define SMALL_MUZZLEDUST 1024+9
#define MuzzleBrakeSmoke 1024+10


// smoke shells stuff
static-var	isSmoking;
#include "smokeshellstoggle.h"

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin front_wheels around x-axis speed <350.082418>;
	spin rear_wheels around x-axis speed <350.082418>;
	sleep (100);
	bMoving = TRUE;
	get PRINT(1, bMoving);
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	get PRINT(2, bMoving);
	stop-spin front_wheels around x-axis decelerate <100.000000>;
	stop-spin rear_wheels around x-axis decelerate <100.000000>;
}

Create()
{
	hide flare;
	start-script SmokeUnit();
	aim2=FALSE;
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(longestReloadTime)
{
	RestoreDelay = longestReloadTime * 2;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM;

	sleep RestoreDelay;
	turn turret to y-axis 0 speed TURRET_TURN_SPEED;
	turn sleeve to x-axis 0 speed TURRET_PITCH_SPEED;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimWeapon1(heading, pitch)
{
	get PRINT(10, bMoving, isSmoking);

	if (isSmoking) return FALSE; // don't aim weap1 if aiming smoke
	if (bMoving) return FALSE; // don't aim weap1 if moving

	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed TURRET_TURN_SPEED;
	turn sleeve to x-axis (0 - pitch) speed TURRET_PITCH_SPEED;

	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;

	start-script RestoreTurret();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	return TRUE;
}

FireWeapon1()
{
	move barrel to z-axis RECOIL speed RECOIL_SPEED;

	emit-sfx SMALL_MUZZLEFLASH from flare;
	emit-sfx SMALL_MUZZLEDUST from flare;

	wait-for-move barrel along z-axis;
	move barrel to z-axis 0 speed RETURN_SPEED;
	start-script Reload(); // start reload timer after firing
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimWeapon2(heading, pitch)
{
	get PRINT(11, bMoving, isSmoking);
	if (!isSmoking) return FALSE; // don't aim weap1 if aiming smoke

	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed TURRET_TURN_SPEED;
	turn sleeve to x-axis (0 - pitch) speed TURRET_PITCH_SPEED;

	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;

	start-script RestoreTurret();

	if (reloading) return FALSE;

	return TRUE;
}

FireWeapon2()
{
	move barrel to z-axis RECOIL speed RECOIL_SPEED;

	emit-sfx SMALL_MUZZLEFLASH from flare;
	emit-sfx SMALL_MUZZLEDUST from flare;

	wait-for-move barrel along z-axis;
	move barrel to z-axis 0 speed RETURN_SPEED;
	start-script Reload(); // start reload timer after firing
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned vehicle
		corpsetype = 1;
		
		return (0);
	}
	if(severity <= 999)
	{
		// burning vehicle
		corpsetype = 2;
		explode front_wheels type SHATTER | EXPLODE_ON_HIT;
		explode spare type FALL | FIRE | EXPLODE_ON_HIT;
		explode base type BITMAPONLY;
		return(0);
	}
	// outright destroyed vehicle
	corpsetype = 3;
	explode front_wheels type SHATTER | EXPLODE_ON_HIT;
	explode rear_wheels type SHATTER | EXPLODE_ON_HIT;
	explode spare type FALL | FIRE | EXPLODE_ON_HIT;
	explode sleeve type FALL | FIRE | EXPLODE_ON_HIT;
	explode barrel type FALL | FIRE | EXPLODE_ON_HIT;
	explode base type SHATTER;
}
