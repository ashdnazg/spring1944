#include "constants.h" // Thank you Argh

piece	base, front_wheels, rear_wheels, support1, support2, support3,
		roller1, roller2, roller3, roller4, roller5, roller6, roller7, roller8,
		tracks, tracks2,  exhaust1, exhaust2,
		turret, gun, flare, coaxflare, twin_mg, mg_flare1, mg_flare2;
 
static-var  restore_delay, rock, aim2, reloading, mainHead, bMoving, GunAiming, MGAiming, frontMGAimDone, treadnum;

// Signal definitions
#define SIG_MOVE	1
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // Coax MG
#define SIG_AIM_3	8	// frontal MG

// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 turret
#define SMOKEPIECE3 exhaust1
#define SMOKEPIECE4 exhaust2

#include "SmokeUnit_GPL.h" // Thanks again to Argh

//hiding FX emit points
#define FX_HIDE\
	hide flare;\
	hide coaxflare;\
	hide mg_flare1;\
	hide mg_flare2;\

// definitions for RockUnit_Set
#define ROCK_SPEED	<60> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for wheels
#define WHEEL_SPIN		<600>
#define WHEEL_ACCEL		<150>

// definitions for turret movement
#define TURR_TRAVERSE	<20> // electrical
#define TURR_ELEVATE	<7>
#define COAX_ARC		<3>
#define MG_TRAVERSE		<20>
#define MG_ELEVATE		<10>

// definitions for weapons behaviour
#define RELOAD		3200 // time in milliseconds between shots
#define RECOIL		[-1.5] // distance to recoil the gun
#define RETURN_SPEED	[5] // speed at which the barrel returns

// definitions for HitWeapId_S44
#define ARMOUR		4372
#include "HitWeapId_S44.h"

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_MUZZLEFLASH 1024+8
#define SMALL_MUZZLEDUST 1024+9
#define MuzzleBrakeSmoke 1024+10

// tracers
#define SMALL_TRACER 	2048+6


treads() 
{ 
   while( TRUE ) 
   { 
        if(bMoving) 
           { 
              if(treadnum == 0) 
              {             
              hide tracks2; 
              show tracks; 
              } 
            if(treadnum == 1) 
            { 
            hide tracks; 
            show tracks2; 
			}
            treadnum = !treadnum; 
         } 
      sleep 90; 
   }
}

Create()
{
	FX_HIDE
	// init vars
	rock = FALSE;
	aim2 = FALSE;
	reloading = FALSE;
	treadnum=0;
	frontMGAimDone = FALSE;
	hide tracks2;
	// start continuous scripts
	start-script SmokeUnit_GPL();
	start-script treads();
}

StartMoving()
{
	signal SIG_MOVE;
	bMoving = TRUE;
	spin front_wheels around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
	spin rear_wheels around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
	spin roller1 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller2 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller3 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller4 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller5 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller6 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller7 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
 	spin roller8 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
 	spin support1 around x-axis speed WHEEL_SPIN*3 accelerate WHEEL_ACCEL*3;
 	spin support2 around x-axis speed WHEEL_SPIN*3 accelerate WHEEL_ACCEL*3;
 	spin support3 around x-axis speed WHEEL_SPIN*3 accelerate WHEEL_ACCEL*3;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	stop-spin front_wheels around x-axis;
 	stop-spin rear_wheels around x-axis;
	stop-spin roller1 around x-axis;
	stop-spin roller2 around x-axis;
	stop-spin roller3 around x-axis;
	stop-spin roller4 around x-axis;
	stop-spin roller5 around x-axis;
	stop-spin roller6 around x-axis;
	stop-spin roller7 around x-axis;
	stop-spin roller8 around x-axis;
	stop-spin support1 around x-axis;
	stop-spin support2 around x-axis;
	stop-spin support3 around x-axis;
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed TURR_TRAVERSE;
	turn gun to x-axis <0.000000> speed TURR_ELEVATE;
	turn twin_mg to y-axis 0 speed MG_TRAVERSE;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	if (aim2) return 0; // don't aim weap1 if aiming AP
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	GunAiming=1;
	mainHead = heading;
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn gun to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	
	start-script RestoreAfterDelay();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	GunAiming=0;
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	emit-sfx SMALL_MUZZLEFLASH from flare;
	emit-sfx SMALL_MUZZLEDUST from flare;
	// barrel recoil
	move gun to z-axis RECOIL now;
	sleep 200;
	move gun to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

// Weapon 2 - Main cannon, AP
QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

AimWeapon2(heading, pitch)
{	
	aim2 = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	mainHead = heading;
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn gun to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	
	start-script RestoreAfterDelay();
	aim2 = FALSE;
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	return 1;
}

FireWeapon2()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	emit-sfx SMALL_MUZZLEFLASH from flare;
	emit-sfx SMALL_MUZZLEDUST from flare;
	// barrel recoil
	move gun to z-axis RECOIL now;
	sleep 200;
	move gun to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

// Weapon 3 - Coax MG
QueryWeapon3 (piecenum)
	{
	piecenum = coaxFlare;
	}

AimFromWeapon3 (piecenum)
	{
	piecenum = turret;
	}

AimWeapon3(heading, pitch)
	{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	MGAiming=1;
	if (mainHead > 0) {
	  if (heading < mainHead - COAX_ARC || heading > mainHead + COAX_ARC) return 0;
	}
	if (mainHead < 0) {
	  if (heading > mainHead - COAX_ARC || heading < mainHead + COAX_ARC) return 0;		
	}
	
	//turn turret to y-axis heading speed TURR_TRAVERSE;
	wait-for-turn turret around y-axis;
	
	//start-script RestoreAfterDelay();
	MGAiming=0;
	return (1);
	}

FireWeapon3()
	{
	rock = FALSE;
	return(0);
	}

Shot3(foo)
{
	emit-sfx SMALL_TRACER from coaxflare;
	emit-sfx MG_MUZZLEFLASH from coaxflare;
}

// Weapon 4 - frontal MG1
QueryWeapon4 (piecenum)
{
	piecenum = mg_flare1;
}

AimFromWeapon4 (piecenum)
{
	piecenum = twin_mg;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;

	frontMGAimDone = FALSE;

	turn twin_mg to y-axis heading speed MG_TRAVERSE;
	wait-for-turn twin_mg around y-axis;
	start-script RestoreAfterDelay();

	frontMGAimDone = TRUE;

	return (1);
}

FireWeapon4()
{
	rock = FALSE;
	return(0);
}

Shot4(foo)
{
	emit-sfx SMALL_TRACER from mg_flare1;
	emit-sfx MG_MUZZLEFLASH from mg_flare1;
}

// Weapon 5 - frontal MG2
QueryWeapon5 (piecenum)
{
	piecenum = mg_flare2;
}

AimFromWeapon5 (piecenum)
{
	piecenum = twin_mg;
}

AimWeapon5(heading, pitch)
{
	set-signal-mask SIG_AIM_3;

	while(!frontMGAimDone)
	{
		sleep 30;
	}

	return (1);
}

FireWeapon5()
{
	rock = FALSE;
	return(0);
}

Shot5(foo)
{
	emit-sfx SMALL_TRACER from mg_flare2;
	emit-sfx MG_MUZZLEFLASH from mg_flare2;
}

AimFromWeapon6(piecenum) //bulletproof effect 
{
	piecenum = base;
}

QueryWeapon6(piecenum)
{
	piecenum = base;
}

AimWeapon6(heading, pitch)
{
return (1);
}

FireWeapon6()
{
return (0);
}

// TODO: make this pretty
Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned tank - no visual damage
		corpsetype = 1;
		return (0);
	}
	if( severity <= 250 )
	{
		// burning tank
		corpsetype = 2;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		return (0);
	}
	if(severity <= 1000)
	{
		// internal explosion!
		corpsetype = 3;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode roller1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	// OMGWTF direct asteroid hit!
	corpsetype = 4;
	explode turret type EXPLODE_ON_HIT | FIRE | FALL;
	explode base type SHATTER;
	explode gun type SHATTER;
	explode front_wheels type SHATTER;
	explode rear_wheels type SHATTER;
	explode roller1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (0);
}

