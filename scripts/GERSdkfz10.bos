#include "STANDARD_COMMANDS_GPL.h" // Thank you Argh

piece  base, turret, sleeve, barrel, flare, frontwheel, wheel1, wheel2, wheel3, wheel4, wheel5, wheel6, wheel7, tracks1, tracks2;
piece flap1, flap2, flap3;

static-var  restore_delay, rock, aim2, reloading, mainHead, bMoving, treadnum, GunAiming, MGAiming, CannonFearOk, MGFearOk, shotCount;

// Signal definitions
#define SIG_MOVE	1
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // Coax MG

// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 turret
#define SMOKEPIECE3 sleeve
#define SMOKEPIECE4 base

#include "SmokeUnit_GPL.h" // Thanks again to Argh

//hiding FX emit points
#define FX_HIDE\
	hide flare;\

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for HitWeapId_S44
#define ARMOUR		1109
#include "HitWeapId_S44.h"

// definitions for wheels
#define WHEEL_SPIN		<500>
#define WHEEL_ACCEL		<150>

// definitions for turret movement
#define TURR_TRAVERSE	<400> // manual
#define TURR_ELEVATE	<300>

// definitions for weapons behaviour
#define RELOAD		300 // time in milliseconds between shots
#define RECOIL		[-1] // distance to recoil the gun
#define RETURN_SPEED	[20] // speed at which the barrel returns
#define BURST1		3
#define BURST2		5

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define XSMALL_MUZZLEFLASH 1024+8
#define XSMALL_MUZZLEDUST 1024+9

//tracers
#define LARGE_TRACER		2048+1
#define TRACER_PER_X_SHOTS	3

#include "TurnButton.h"

treads() 
{ 
   while( TRUE ) 
   { 
        if(bMoving) 
           { 
              if(treadnum == 0) 
              {             
              hide tracks2; 
              show tracks1; 
              } 
            if(treadnum == 1) 
            { 
            hide tracks1; 
            show tracks2; 
			}
            treadnum = !treadnum; 
         } 
      sleep 90; 
   } 
}

Create()
{
	FX_HIDE
	// init vars
	rock = FALSE;
	aim2 = FALSE;
	reloading = FALSE;
	treadnum=0;
	shotCount=0;
		// start continuous scripts
	start-script SmokeUnit_GPL();
	start-script treads();
}

StartMoving()
{
	signal SIG_MOVE;
	bMoving = TRUE;
	set ACTIVATION to 1;
	spin frontwheel around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel1 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel2 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel3 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel4 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel5 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel6 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel7 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	set ACTIVATION to 0;
	stop-spin frontwheel around x-axis;
	stop-spin wheel1 around x-axis;
 	stop-spin wheel2 around x-axis;
 	stop-spin wheel3 around x-axis;
 	stop-spin wheel4 around x-axis;
 	stop-spin wheel5 around x-axis;
 	stop-spin wheel6 around x-axis;
 	stop-spin wheel7 around x-axis;
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <60>;
	turn barrel to x-axis <0.000000> speed <10>;
	turn flap1 to z-axis <0.000000> speed <50>;
	turn flap2 to z-axis <0.000000> speed <50>;
	turn flap3 to x-axis <0.000000> speed <50>;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	if (aim2) return 0; // don't aim weap1 if aiming AP
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	GunAiming=1;
	
	mainHead = heading;
	turn flap1 to z-axis <90.00000> speed <50>;
	turn flap2 to z-axis <-90.00000> speed <50>;
	turn flap3 to x-axis <-90.00000> speed <50>;
	
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	wait-for-turn flap1 around z-axis;
	wait-for-turn flap2 around z-axis;
	wait-for-turn flap3 around x-axis;
	
	start-script RestoreAfterDelay();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	GunAiming=0;
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	
/*	emit-sfx LARGE_TRACER from flare;
	var i;
	for (i=0; i < BURST1; ++i) 
	{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	  // barrel recoil
	  move barrel to z-axis RECOIL now;
	  sleep 50;
	  move barrel to z-axis 0 speed RETURN_SPEED;
	  sleep 50;
	}
	emit-sfx LARGE_TRACER from flare;
	*/
	rock = FALSE;
	CannonFearOk=1;
	start-script Reload(); // start reload timer after firing
	return 0;
}

Shot1(just_a_zero)
{
	++shotCount;
	if(shotCount>=TRACER_PER_X_SHOTS)
	{
		emit-sfx LARGE_TRACER from flare;
		shotCount=0;
	}
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 50;
	move barrel to z-axis 0 speed RETURN_SPEED;
}

/*AimFromWeapon3(piecenum) //Main gun HE fear
{
	piecenum = turret;
}

QueryWeapon3(piecenum)
{
	piecenum = flare;
}

AimWeapon3(heading, pitch)
{
	if (CannonFearOk==1)
	{
	wait-for-turn turret around y-axis;
	return (1);
	}
return 0;
}

FireWeapon3()
{
CannonFearOk=0;
return (0);
}

// Weapon 2 - AA
QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

AimWeapon2(heading, pitch)
{
	aim2 = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	mainHead = heading;
	turn flap1 to z-axis <90.00000> speed <50>;
	turn flap2 to z-axis <-90.00000> speed <50>;
	turn flap3 to x-axis <-90.00000> speed <50>;
	
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	wait-for-turn flap1 around z-axis;
	wait-for-turn flap2 around z-axis;
	wait-for-turn flap3 around x-axis;
	
	start-script RestoreAfterDelay();
	aim2 = FALSE;
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	return 1;
}

FireWeapon2()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	var i;
	for (i=0; i < BURST2; ++i) 
	{
	emit-sfx XSMALL_MUZZLEFLASH from flare;
	emit-sfx XSMALL_MUZZLEDUST from flare;
	  // barrel recoil
	  move barrel to z-axis RECOIL now;
	  sleep 50;
	  move barrel to z-axis 0 speed RETURN_SPEED;
	  sleep 50;
	}	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}*/

Killed(severity, corpsetype)
{
	if(severity <= 1000)
	{
		corpsetype = 1;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
	}
	corpsetype = 1;
	explode turret type EXPLODE_ON_HIT | FIRE | FALL;
	explode barrel type SHATTER;
	explode frontwheel type SHATTER;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	explode wheel3 type SHATTER | EXPLODE_ON_HIT;
	explode wheel5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
}

