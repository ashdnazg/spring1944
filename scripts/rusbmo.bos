#define TAK

piece base, hull, turret_37, sleeve_37, barrel_37, flare_37, turret_45, sleeve_45, barrel_45, flare_45,
	  turret_aa, guns_aa, flare_aa_1, flare_aa_2, turret_mg, guns_mg, flare_mg_1, flare_mg_2,
	  wake1, wake2, wake3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Turret turn speeds
#define AA37_TURRET_TURN		<90>
#define AA37_TURRET_PITCH		<90>

#define GUN45_TURRET_TURN		<25>
#define GUN45_TURRET_PITCH		<30>

#define AAMG_TURRET_TURN		<80>
#define AAMG_TURRET_PITCH		<45>

#define MG_TURRET_TURN			<60>
#define MG_TURRET_PITCH			<35>

//*********************Recoil
#define AA37_GUN_RECOIL			[0.4]
#define AA37_GUN_RECOIL_SPEED	[10]
#define AA37_GUN_BACK_SPEED		[0.2]

#define GUN45_GUN_RECOIL		[0.4]
#define GUN45_GUN_RECOIL_SPEED	[10]
#define GUN45_GUN_BACK_SPEED	[0.2]

//*********************Death anim
#define HULL_LIST_SPEED		<10>
#define HULL_LIST_ANGLE		<30>

#define RESTORE_PERIOD		2500

#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16
#define SIG_AIM4			32
#define SIG_AIM5			64
#define SIG_DEATH			128

#define SMOKEPIECE	hull

#include "exptype.h"
#include "sfxtype.h"
#include "damageSmoke.h"

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define XSMALL_MUZZLEFLASH 1024+8
#define XSMALL_MUZZLEDUST 1024+9

static-var					CurrentSpeed, bMoving, aamgFlare, mgFlare, bAimingAA;

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			sleep 500;
		}
		sleep 500;
	}
}

InitTurrets()
//Pre-position turrets
{
	turn turret_45 to y-axis <180> now;
	turn turret_mg to y-axis <180> now;
	// Pre-set flares
	aamgFlare=TRUE;
	mgFlare=TRUE;
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var oldXZ, newXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

HideFlares()
{
	hide flare_37;
	hide flare_45;
	hide flare_aa_1;
	hide flare_aa_2;
	hide flare_mg_1;
	hide flare_mg_2;
}

Create()
{
	start-script HideFlares();
	bMoving = FALSE;
	bAimingAA = FALSE;
	call-script InitTurrets();
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
	start-script StopCatcher();
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	bMoving = TRUE;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_AIM3|SIG_AIM4|SIG_AIM5|SIG_DEATH;
	sleep RESTORE_PERIOD;

	turn turret_37 to y-axis <0> speed AA37_TURRET_TURN;
	turn sleeve_37 to x-axis <0> speed AA37_TURRET_PITCH;

	turn turret_45 to y-axis <180> speed GUN45_TURRET_TURN;
	turn sleeve_45 to x-axis <0> speed GUN45_TURRET_PITCH;
	turn turret_aa to y-axis <0> speed AAMG_TURRET_TURN;
	turn guns_aa to x-axis <0> speed AAMG_TURRET_PITCH;
	turn turret_mg to y-axis <0> speed MG_TURRET_TURN;
	turn guns_mg to x-axis <0> speed MG_TURRET_PITCH;
}

QueryWeapon1(piecenum)
{
	piecenum = flare_37;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret_37;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	bAimingAA = TRUE;
	turn turret_37 to y-axis heading speed AA37_TURRET_TURN;
	turn sleeve_37 to x-axis (0-pitch) speed AA37_TURRET_PITCH;
	wait-for-turn turret_37 around y-axis;
	wait-for-turn sleeve_37 around x-axis;
	start-script RestoreTurret();
	bAimingAA = FALSE;
	return (TRUE);
}

FireWeapon1()
{
//	show flare_37;
//	hide flare_37;
}

Shot1(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_37;
	emit-sfx XSMALL_MUZZLEDUST from flare_37;
	move barrel_37 to z-axis (0-AA37_GUN_RECOIL) speed AA37_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_37 to z-axis [0] speed AA37_GUN_BACK_SPEED;
}

QueryWeapon2(piecenum)
{
	piecenum = flare_37;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret_37;
}

AimWeapon2(heading, pitch)
{
	if(bAimingAA)
	{
		return FALSE;
	}
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	turn turret_37 to y-axis heading speed AA37_TURRET_TURN;
	turn sleeve_37 to x-axis (0-pitch) speed AA37_TURRET_PITCH;
	wait-for-turn turret_37 around y-axis;
	wait-for-turn sleeve_37 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
//	show flare_37;
//	hide flare_37;
}

Shot2(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_37;
	emit-sfx XSMALL_MUZZLEDUST from flare_37;
	move barrel_37 to z-axis (0-AA37_GUN_RECOIL) speed AA37_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_37 to z-axis [0] speed AA37_GUN_BACK_SPEED;
}

QueryWeapon3(piecenum)
{
	piecenum = flare_45;
}

AimFromWeapon3(piecenum)
{
	piecenum = turret_45;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	turn turret_45 to y-axis heading speed GUN45_TURRET_TURN;
	turn sleeve_45 to x-axis (0-pitch) speed GUN45_TURRET_PITCH;
	wait-for-turn turret_45 around y-axis;
	wait-for-turn sleeve_45 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon3()
{
//	show flare_45;
	emit-sfx XSMALL_MUZZLEFLASH from flare_45;
	emit-sfx XSMALL_MUZZLEDUST from flare_45;
	move barrel_45 to z-axis (0-GUN45_GUN_RECOIL) speed GUN45_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_45 to z-axis [0] speed GUN45_GUN_BACK_SPEED;
//	hide flare_45;
}

QueryWeapon4(piecenum)
{
	if(aamgFlare)
	{
		piecenum = flare_aa_1;
	} else {
		piecenum = flare_aa_2;
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = turret_aa;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM4;
	set-signal-mask SIG_AIM4|SIG_DEATH;
	turn turret_aa to y-axis heading speed AAMG_TURRET_TURN;
	turn guns_aa to x-axis (0-pitch) speed AAMG_TURRET_PITCH;
	wait-for-turn turret_aa around y-axis;
	wait-for-turn guns_aa around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon4()
{
}

Shot4(foo)
{
	if(aamgFlare)
	{
		emit-sfx MG_MUZZLEFLASH from flare_aa_1;
	} else {
		emit-sfx MG_MUZZLEFLASH from flare_aa_2;
	}
	aamgFlare = !aamgFlare;
}

QueryWeapon5(piecenum)
{
	if(mgFlare)
	{
		piecenum = flare_mg_1;
	} else {
		piecenum = flare_mg_2;
	}
}

AimFromWeapon5(piecenum)
{
	piecenum = turret_mg;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM5;
	set-signal-mask SIG_AIM5|SIG_DEATH;
	turn turret_mg to y-axis heading speed MG_TURRET_TURN;
	turn guns_mg to x-axis (0-pitch) speed MG_TURRET_PITCH;
	wait-for-turn turret_mg around y-axis;
	wait-for-turn guns_mg around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon5()
{
}

Shot5(foo)
{
	if(mgFlare)
	{
		emit-sfx MG_MUZZLEFLASH from flare_mg_1;
	} else {
		emit-sfx MG_MUZZLEFLASH from flare_mg_2;
	}
	mgFlare = !mgFlare;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<99)
	{
		corpsetype = 1;
		turn hull to z-axis HULL_LIST_ANGLE speed HULL_LIST_SPEED;
		wait-for-turn hull around z-axis;
		explode hull type		BITMAPONLY|BITMAP1;
		return (TRUE);
	}
	corpsetype = 2;
	explode hull type		SHATTER|BITMAP1;
	explode turret_37 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode turret_45 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode turret_aa type	FALL|EXPLODE_ON_HIT|FIRE;
	explode turret_mg type	FALL|EXPLODE_ON_HIT|FIRE;
	return (TRUE);
}