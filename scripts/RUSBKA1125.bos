#define TAK

#include "sfxtype.h"
#include "exptype.h"

piece  base, wake1, wake2;
piece  turret1, mantlet1, barrel1, flare1, turret2, mantlet2, barrel2, flare2, turret3, mantlet3, barrel3, flare3, turret4, mantlet4, barrel4, flare4; 

static-var restore_delay;

// Signal definitions
#define SIG_MOVE			2
#define UNIT_ALLIED			74
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // Turret 2
#define SIG_AIM_3	8 // Turret 3
#define SIG_AIM_4	16 // Turret 4

//smokepieces
#define SMOKEPIECE1	base
#define SMOKEPIECE2 exhaust
#define SMOKEPIECE3 turret1
#define SMOKEPIECE4 turret4

// definitions for turret movement
#define TURR_TRAVERSE	<30> // manual?
#define TURR_ELEVATE	<25>

//hide macro
#define FX_HIDE\
	hide flare1;\
	hide flare2;\
	hide flare3;\
	hide flare4;\
	
// definitions for weapons behaviour
#define RELOAD		3000 // time in milliseconds between shots
#define RECOIL		[-1.5] // distance to recoil the gun
#define RETURN_SPEED	[15] // speed at which the barrel returns

#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH	1024+7
#define MEDIUM_Muzzleflash	1024+8
#define MEDIUM_MuzzleDust	1024+9



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	set ACTIVATION to 1;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
		while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	set ACTIVATION to 0;
	signal SIG_MOVE;
}

Create()
{	
	FX_HIDE
	start-script SmokeUnit();
}

// Weapon 1 - Main Cannon
QueryWeapon1(piecenum)
{
	piecenum = flare1;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret1;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
		
	turn turret1 to y-axis heading speed TURR_TRAVERSE;
	turn mantlet1 to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret1 around y-axis;
	wait-for-turn mantlet1 around x-axis;

	return 1;
}

FireWeapon1()
{
	emit-sfx MEDIUM_Muzzleflash from flare1;
	emit-sfx MEDIUM_MuzzleDust from flare1;
	// barrel recoil
	move barrel1 to z-axis RECOIL now;
	sleep 200;
	move barrel1 to z-axis 0 speed RETURN_SPEED;
	return 0;
}

// Weapon 2 - Turret 2
QueryWeapon2(piecenum)
	{
	piecenum = flare2;
	}

AimFromWeapon2(piecenum)
	{
	piecenum = turret2;
	}

AimWeapon2(heading, pitch)
	{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed TURR_TRAVERSE;
	turn mantlet2 to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret2 around y-axis;
	wait-for-turn mantlet2 around x-axis;

	return (1);
	}

FireWeapon2()
	{
		emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 67;
	return(0);
	}
	
// Weapon 3 - Turret 3
QueryWeapon3(piecenum)
	{
	piecenum = flare3;
	}

AimFromWeapon3(piecenum)
	{
	piecenum = turret3;
	}

AimWeapon3(heading, pitch)
	{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed TURR_TRAVERSE;
	turn mantlet3 to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret3 around y-axis;
	wait-for-turn mantlet3 around x-axis;
	
	return (1);
	}

FireWeapon3()
	{
		emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 67;
	return(0);
	}
	
// Weapon 4 - Turret 4
QueryWeapon4(piecenum)
	{
	piecenum = flare4;
	}

AimFromWeapon4(piecenum)
	{
	piecenum = turret4;
	}

AimWeapon4(heading, pitch)
	{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret4 to y-axis heading speed TURR_TRAVERSE;
	turn mantlet4 to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret4 around y-axis;
	wait-for-turn mantlet4 around x-axis;

	return (1);
	}

FireWeapon4()
	{
		emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 67;
		emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 67;
	return(0);
	}
	
SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 999 )
	{
		corpsetype = 1;
		
		return (0);
	}
	corpsetype = 1;
//	explode body type SHATTER;
}
