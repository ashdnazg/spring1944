#define TA			// This is a TA script

#include "constants.h"

piece  base, load_shoulder, load_arm, front_wheels, rear_wheels, tow_point;
 
static-var restore_delay, skip;

// Signal definitions
#define SIG_AIM				2
#define INFANTRY			412876 //458752 //983040 // this is 65536 * s3o model radius
#define FUDGE				50 // isn't enough even between smg and rifle

// Transport script courtesy of Zwzsg's script for Spring SW imptroopc
TransportPickup(unitid)
{
	if( get UNIT_ALLIED(unitid) == 1) { // only pick up allied units
			set BUSY to 1;
			turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - get UNIT_XZ(unitid)) now;
			move load_arm to z-axis get XZ_HYPOT(get UNIT_XZ(unitid) - get PIECE_XZ(base)) now;
			turn load_arm to y-axis get XZ_ATAN(get UNIT_XZ(unitid) - get PIECE_XZ(base)) now;
			attach-unit unitid to load_arm;
			move load_arm to z-axis [10.000000] speed [2400.000000];
			wait-for-move load_arm along z-axis;
			if( get UNIT_HEIGHT (unitid) == INFANTRY) 
			{ 
			//<= INFANTRY + FUDGE ) { // when using FUDGE
			  attach-unit unitid to 0 - 1; // hide infantry models
			}
			if( get UNIT_HEIGHT (unitid) != INFANTRY) 
			{ 
			//> INFANTRY + FUDGE ) {  // when using FUDGE
			  attach-unit unitid to tow_point; // don't hide other units
			}
			set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	skip = skip + 1;
	if (skip == 2) skip = 0;
	if (skip != 0) return;
	var Func_Var_3;
	Func_Var_3 = get XZ_HYPOT(get PIECE_XZ(base) - position) + [5];
	//if( Func_Var_3 >= 0 AND Func_Var_3 <= [95.000000] )
	//{
		set BUSY to 1;
		//spin load_shoulder around y-axis speed <50>;
		turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
		//move load_arm to z-axis [10.000000] now;
		//turn load_arm to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
		attach-unit unitid to load_arm;
		move load_arm to z-axis Func_Var_3 speed [3200.000000];
		wait-for-move load_arm along z-axis;
		drop-unit unitid;
		move load_arm to z-axis [0.000000] now;
		wait-for-move load_arm along z-axis;
		if( get XZ_HYPOT(get PIECE_XZ(base) - get UNIT_XZ(unitid)) < [1.000000] )
		{
			attach-unit unitid to 0 - 1;
		}
		//stop-spin load_shoulder around y-axis;
		sleep 5;
		set BUSY to 0;
	//}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	spin front_wheels around x-axis speed <350.082418>;
	spin rear_wheels around x-axis speed <350.082418>;
}

StopMoving()
{
	stop-spin front_wheels around x-axis decelerate <100.000000>;
	stop-spin rear_wheels around x-axis decelerate <100.000000>;
}

Create()
{
//	spin tow_point around y-axis speed <100>;
	start-script SmokeUnit();
	skip = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromWeapon1(piecenum) //supply range ring 
{
	piecenum = base;
}

QueryWeapon1(piecenum)
{
	piecenum = base;
}

AimWeapon1(heading, pitch)
{
	return 1;
}

FireWeapon1()
{
return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned vehicle
		corpsetype = 1;
		
		return (0);
	}
	if(severity <= 999)
	{
		// burning vehicle
		corpsetype = 2;
		explode front_wheels type SHATTER | EXPLODE_ON_HIT;
		explode base type BITMAPONLY;
		return(0);
	}
	// outright destroyed vehicle
	corpsetype = 3;
	explode front_wheels type SHATTER | EXPLODE_ON_HIT;
	explode rear_wheels type SHATTER | EXPLODE_ON_HIT;
	explode base type SHATTER;
}
