#define TAK

piece base, mount_20_1, sleeve_20_1, barrel_20_1, flare_20_1, mount_20_2, sleeve_20_2, barrel_20_2, flare_20_2,
	  mount_20_3, sleeve_20_3, barrel_20_3, flare_20_3,
	  load1, load2, load3, turret, grabber, link,
	  wake1, wake2, wake3, wake4, wake5, wake6;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Turret turn speeds
#define AA20_TURRET_TURN		<40>
#define AA20_TURRET_PITCH		<45>

//*********************Recoil
#define AA20_GUN_RECOIL			[0.4]
#define AA20_GUN_RECOIL_SPEED	[10]
#define AA20_GUN_BACK_SPEED		[1]

//*********************Load distance
#define LOAD_DIST				[125]

//*********************Death anim
#define base_LIST_SPEED		<2.5>
#define base_LIST_ANGLE_Z		<-5>
#define base_LIST_ANGLE_X		<-15>

#define RESTORE_PERIOD		2500

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16
#define SIG_LOAD			32

#define SMOKEPIECE	base

#include "constants.h"
#include "damageSmoke.h"
static-var	MaxSpeed, bMoving, CargoCount, unit1, unit2, unit3, bTooFar, LastUnloadPoint, boom_len, boom_heading, boom_pitch, bAimAA1, bAimAA2, bAimAA3;

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define XSMALL_MUZZLEFLASH 1024+5
#define XSMALL_MUZZLEDUST 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_MUZZLEFLASH 1024+8
#define SMALL_MUZZLEDUST 1024+9

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			sleep 500;
		}
		sleep 500;
	}
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

InitTurrets()
{
	turn mount_20_3 to y-axis <180> now;
}

HideFlares()
{
	hide flare_20_1;
	hide flare_20_2;
	hide flare_20_3;
}

Create()
{
	start-script HideFlares();
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	// we have no cargo yet
	unit1 = -1;
	unit2 = -1;
	unit3 = -1;
	bAimAA1 = FALSE;
	bAimAA2 = FALSE;
	bAimAA3 = FALSE;
	CargoCount = 0;
	start-script InitTurrets();
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		emit-sfx 2 from wake4;
		emit-sfx 2 from wake5;
		emit-sfx 2 from wake6;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var oldXZ, newXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	bMoving = TRUE;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_DEATH;
	sleep RESTORE_PERIOD;

	turn mount_20_1 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis <0> speed AA20_TURRET_PITCH;

	turn mount_20_2 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis <0> speed AA20_TURRET_PITCH;

	turn mount_20_3 to y-axis <180> speed AA20_TURRET_TURN;
	turn sleeve_20_3 to x-axis <0> speed AA20_TURRET_PITCH;
}

QueryWeapon1(piecenum)
{
	piecenum = flare_20_1;
}

AimFromWeapon1(piecenum)
{
	piecenum = mount_20_1;
}

AimWeapon1(heading, pitch)
{
	if (bAimAA1)
	{
		return FALSE;
	}
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	turn mount_20_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn mount_20_1 around y-axis;
	wait-for-turn sleeve_20_1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
}

Shot1(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_1;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_1;
	move barrel_20_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_1 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

QueryWeapon2(piecenum)
{
	piecenum = flare_20_2;
}

AimFromWeapon2(piecenum)
{
	piecenum = mount_20_2;
}

AimWeapon2(heading, pitch)
{
	if (bAimAA2)
	{
		return FALSE;
	}
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	turn mount_20_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn mount_20_2 around y-axis;
	wait-for-turn sleeve_20_2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
}

Shot2(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_2;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_2;
	move barrel_20_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_2 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

QueryWeapon3(piecenum)
{
	piecenum = flare_20_3;
}

AimFromWeapon3(piecenum)
{
	piecenum = mount_20_3;
}

AimWeapon3(heading, pitch)
{
	if (bAimAA3)
	{
		return FALSE;
	}
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	turn mount_20_3 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_3 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn mount_20_3 around y-axis;
	wait-for-turn sleeve_20_3 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon3()
{
}

Shot3(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_3;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_3;
	move barrel_20_3 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_3 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

// AA weapons
QueryWeapon4(piecenum)
{
	piecenum = flare_20_1;
}

AimFromWeapon4(piecenum)
{
	piecenum = mount_20_1;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	bAimAA1 = TRUE;
	turn mount_20_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn mount_20_1 around y-axis;
	wait-for-turn sleeve_20_1 around x-axis;
	start-script RestoreTurret();
	bAimAA1 = FALSE;
	return (TRUE);
}

FireWeapon4()
{
}

Shot4(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_1;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_1;
	move barrel_20_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_1 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

QueryWeapon5(piecenum)
{
	piecenum = flare_20_2;
}

AimFromWeapon5(piecenum)
{
	piecenum = mount_20_2;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	bAimAA2 = TRUE;
	turn mount_20_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn mount_20_2 around y-axis;
	wait-for-turn sleeve_20_2 around x-axis;
	start-script RestoreTurret();
	bAimAA2 = FALSE;
	return (TRUE);
}

FireWeapon5()
{
}

Shot5(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_2;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_2;
	move barrel_20_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_2 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

QueryWeapon6(piecenum)
{
	piecenum = flare_20_3;
}

AimFromWeapon6(piecenum)
{
	piecenum = mount_20_3;
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	bAimAA3 = TRUE;
	turn mount_20_3 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_3 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn mount_20_3 around y-axis;
	wait-for-turn sleeve_20_3 around x-axis;
	start-script RestoreTurret();
	bAimAA3 = FALSE;
	return (TRUE);
}

FireWeapon6()
{
}

Shot6(foo)
{
	emit-sfx XSMALL_MUZZLEFLASH from flare_20_3;
	emit-sfx XSMALL_MUZZLEDUST from flare_20_3;
	move barrel_20_3 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_3 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

//Transport stuff
BoomCalc(posxz,posy)
{
	var dxz,dy,lenxz;

	dxz = get PIECE_XZ(turret) - posxz;
	dy = posy - get PIECE_Y(turret);
	lenxz = get XZ_HYPOT(dxz);

	boom_len = get HYPOT(lenxz,dy);
	boom_heading = get XZ_ATAN(dxz);
	boom_pitch = get ATAN(dy,lenxz);
	bTooFar = (boom_len > LOAD_DIST);
}

PositionLink(posxz,posy)
{
	turn turret to y-axis boom_heading now;
	turn grabber to x-axis 0-boom_pitch now;
	move grabber to z-axis boom_len now;
}

ReturnLink()
{
	turn turret to y-axis <0> now;
	turn grabber to x-axis <0> now;
	move grabber to z-axis [0] now;
}

CargoCheck()
//This should check all the carried units and remove any dead ones
{
	var loadxz, unitxz, dist, tmpUnit, u1, u2;
	set-signal-mask SIG_LOAD;
	while(TRUE)
	{
		if(unit1>(0-1))
		{
			loadxz = get PIECE_XZ(load1);
			unitxz = get UNIT_XZ(unit1);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit1 = -1;
				CargoCount = CargoCount - 1;
			}
		}
		if(unit2>(0-1))
		{
			loadxz = get PIECE_XZ(load2);
			unitxz = get UNIT_XZ(unit2);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit2 = -1;
				CargoCount = CargoCount - 1;
			}
		}
		if(unit3>(0-1))
		{
			loadxz = get PIECE_XZ(load3);
			unitxz = get UNIT_XZ(unit3);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit3 = -1;
				CargoCount = CargoCount - 1;
			}
		}
		// Shift cargo so that the only unit occupies central space
		if(CargoCount == 1)
		{
			if(unit1 > 0)
			{
				tmpUnit = unit1;
			}
			if(unit2 > 0)
			{
				tmpUnit = unit2;
			}
			if(unit3 > 0)
			{
				tmpUnit = unit3;
			}
			attach-unit tmpUnit to load1;
			unit1 = tmpUnit;
			if(unit2 == tmpUnit)
			{
				unit2 = -1;
			}
			if(unit3 == tmpUnit)
			{
				unit3 = -1;
			}
		}
		// Shif cargo so that 2 unit occupy side positions
		u1 = -1;
		u2 = -1;
		if(CargoCount == 2)
		{
			if(unit1 > 0)
			{
				u1 = unit1;
				unit1 = -1;
			}
			if(unit2 > 0)
			{
				if(u1 < 0)
				{
					u1 = unit2;
				} else
				{
					u2 = unit2;
				}
				unit2 = 0;
			}
			if(unit3 > 0)
			{
				if(u1 < 0)
				{
					u1 = unit3;
				} else
				{
					u2 = unit3;
				}
				unit3 = 0;
			}
			attach-unit u1 to load2;
			unit2 = u1;
			attach-unit u2 to load3;
			unit3 = u2;
		}
		sleep 1000;
	}
}

TransportPickup(unitid)
{
	var bAlreadyPlaced;
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
	bAlreadyPlaced = FALSE;
    call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid));
	if( bTooFar )
	{
		return (1);
	}
	set BUSY to 1;
	//Determine next free unit slot
	if (unit1 == -1)
	{
		attach-unit unitid to load1;
		unit1 = unitid;
		CargoCount = CargoCount + 1;
		bAlreadyPlaced = TRUE;
	} else
	if (unit2 == -1)
	{
		attach-unit unitid to load2;
		unit2 = unitid;
		CargoCount = CargoCount + 1;
		bAlreadyPlaced = TRUE;
	} else
	if (unit3 == -1)
	{
		attach-unit unitid to load3;
		unit3 = unitid;
		CargoCount = CargoCount + 1;
		bAlreadyPlaced = TRUE;
	} else
	{
		attach-unit unitid to 0 - 1;
		CargoCount = CargoCount + 1;
	}
	start-script CargoCheck();
	sleep 500;
	set BUSY to 0;
}

TransportDrop(unitid, position)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
    call-script BoomCalc(position,get GROUND_HEIGHT(position));
	if( bTooFar )
	{
		return (1);
	}
	set BUSY to 1;
	attach-unit unitid to link;
	call-script PositionLink();
	sleep 50;
	drop-unit unitid;
	CargoCount = CargoCount - 1;
//	call-script AreaUnload(unitid,[210.000000]);
	//Determine a unit slot to free
	if (unit1 == unitid)
	{
		unit1 = -1;
	} else
	if (unit2 == unitid)
	{
		unit2 = -1;
	} else
	if (unit3 == unitid)
	{
		unit3 = -1;
	}
	call-script ReturnLink();
	sleep 1000;
	set BUSY to 0;
	sleep 1500;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<99)
	{
		corpsetype = 1;
		turn base to x-axis base_LIST_ANGLE_X speed base_LIST_SPEED;
		turn base to z-axis base_LIST_ANGLE_Z speed base_LIST_SPEED;
		wait-for-turn base around x-axis;
		wait-for-turn base around z-axis;
		explode base type		BITMAPONLY;
		return (TRUE);
	}
	corpsetype = 2;
	explode base type		SHATTER;
	explode mount_20_1 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode mount_20_2 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode mount_20_3 type	FALL|EXPLODE_ON_HIT|FIRE;
	return (TRUE);
}