#define TAK

#include "constants.h"

#define SIG_ACTIVATE	2

piece  base, pad, beam;

static-var  Static_Var_3, Static_Var_4;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
}

Create()
{
	while (get BUILD_PERCENT_LEFT)
	{
		move base to y-axis 0 - ([0.3] * get BUILD_PERCENT_LEFT) now;
		sleep 10;
	}
	move base to y-axis 0 now;

	start-script SmokeUnit();
}

pickPlace(buildPlace)
{
	if (buildPlace == 1)
	{
		move pad to x-axis [25] speed [4000];
	}

	if (buildPlace == 0)
	{
		move pad to x-axis [0] speed [4000];
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

Activate()
{
	signal SIG_ACTIVATE;
	set ACTIVATION to 1;
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;

	set ACTIVATION to 0;
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type SHATTER | EXPLODE_ON_HIT;
		return (0);
	}
	corpsetype = 1;
	explode base type SHATTER | EXPLODE_ON_HIT;
}
