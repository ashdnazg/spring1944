#include "constants.h"

piece  base, gun, frontwheel, rearwheel, wheel1, wheel2, wheel3, tracks1, tracks2;

 
static-var  restore_delay, rock,  bMoving, treadnum, GunAiming;

// Signal definitions
#define SIG_MOVE	1
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // AA MG
#define SIG_STOPTURN	8
// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 base
#define SMOKEPIECE3 gun
#define SMOKEPIECE4 gun

#include "SmokeUnit_GPL.h" // Thanks again to Argh

// definitions for wheels
#define WHEEL_SPIN		<600>
#define WHEEL_ACCEL		<150>

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for HitWeapId_S44
#define ARMOUR		1500
#include "HitWeapId_S44.h"

// definitions for turret movement
#define TURR_TRAVERSE	<9>
#define TURR_ELEVATE	<5>


//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6


treads() 
{ 
   while( TRUE ) 
   { 
        if(bMoving) 
           { 
              if(treadnum == 0) 
              {             
              hide tracks2; 
              show tracks1; 
              } 
            if(treadnum == 1) 
            { 
            hide tracks1; 
            show tracks2; 
			}
            treadnum = !treadnum; 
         } 
      sleep 90; 
   } 
}

Create()
{
	// init vars
	rock = FALSE;
	// start continuous scripts
	start-script SmokeUnit_GPL();
	start-script treads();
}

StartMoving()
{
	signal SIG_MOVE;
	bMoving = TRUE;
	spin frontwheel around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin rearwheel around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel1 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel2 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel3 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	stop-spin frontwheel around x-axis;
 	stop-spin rearwheel around x-axis;
	stop-spin wheel1 around x-axis;
 	stop-spin wheel2 around x-axis;
 	stop-spin wheel3 around x-axis;
}


RestoreAfterDelay()
{
	sleep restore_delay;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = gun;
}

AimFromWeapon1(piecenum)
{
	piecenum = gun;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return 1;
}

FireWeapon1()
{
	return 0;
}

// TODO: make this pretty
Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
		return (0);
	}
	if( severity <= 250 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
	}
	if(severity <= 1000)
	{
		corpsetype = 2;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
	}
	corpsetype = 2;
	explode gun type EXPLODE_ON_HIT | FIRE | FALL;
	explode frontwheel type SHATTER;
	explode rearwheel type SHATTER;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	explode wheel3 type SHATTER | EXPLODE_ON_HIT;
}

