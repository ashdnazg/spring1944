#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wheel1, wheel2, wheel3, stand, turret, guns, flare1, flare2, flare3, flare4;
 
static-var restore_delay;

// Signal definitions
#define SIG_AIM				2

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7

// tracers
#define SMALL_TRACER 	2048+4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	set ACTIVATION to 1;
	/*emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;*/
	spin wheel1 around x-axis speed <350.082418>;
	spin wheel2 around x-axis speed <350.082418>;
	spin wheel3 around x-axis speed <350.082418>;
}

StopMoving()
{
	set ACTIVATION to 0;
	stop-spin wheel1 around x-axis decelerate <100.000000>;
	stop-spin wheel2 around x-axis decelerate <100.000000>;
	stop-spin wheel3 around x-axis decelerate <100.000000>;
}

Create()
{
	start-script SmokeUnit();
}

// Weapon 1 - Maxim
QueryWeapon1 (piecenum)
	{
	piecenum = flare1;
	}

AimFromWeapon1 (piecenum)
	{
	piecenum = turret;
	}

AimWeapon1(heading, pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <150>; 
	turn guns to x-axis 0 - pitch speed <100>; 
	wait-for-turn turret around y-axis; 
	wait-for-turn guns around x-axis;
	return (1);
	}

FireWeapon1()
	{
	emit-sfx SMALL_TRACER from flare1;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx SMALL_TRACER from flare1;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx SMALL_TRACER from flare1;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare1;
	sleep 50;
	return(0);
	}
	
// Weapon 2 - Maxim
QueryWeapon2 (piecenum)
	{
	piecenum = flare2;
	}

AimFromWeapon2 (piecenum)
	{
	piecenum = turret;
	}

AimWeapon2(heading, pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <150>; 
	turn guns to x-axis 0 - pitch speed <100>; 
	wait-for-turn turret around y-axis; 
	wait-for-turn guns around x-axis;
	return (1);
	}

FireWeapon2()
	{
	emit-sfx SMALL_TRACER from flare2;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx SMALL_TRACER from flare2;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx SMALL_TRACER from flare2;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare2;
	sleep 50;
	return(0);
	}
	
// Weapon 3 - Maxim
QueryWeapon3 (piecenum)
	{
	piecenum = flare3;
	}

AimFromWeapon3 (piecenum)
	{
	piecenum = turret;
	}

AimWeapon3(heading, pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <150>; 
	turn guns to x-axis 0 - pitch speed <100>; 
	wait-for-turn turret around y-axis; 
	wait-for-turn guns around x-axis;
	return (1);
	}

FireWeapon3()
	{
	emit-sfx SMALL_TRACER from flare3;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx SMALL_TRACER from flare3;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx SMALL_TRACER from flare3;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare3;
	sleep 50;
	return(0);
	}
	
// Weapon 4 - Maxim
QueryWeapon4 (piecenum)
	{
	piecenum = flare4;
	}

AimFromWeapon4 (piecenum)
	{
	piecenum = turret;
	}

AimWeapon4(heading, pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <150>; 
	turn guns to x-axis 0 - pitch speed <100>; 
	wait-for-turn turret around y-axis; 
	wait-for-turn guns around x-axis;
	return (1);
	}

FireWeapon4()
	{
	emit-sfx SMALL_TRACER from flare4;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx SMALL_TRACER from flare4;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx SMALL_TRACER from flare4;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	emit-sfx MG_MUZZLEFLASH from flare4;
	sleep 50;
	return(0);
	}
	
SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 999 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode guns type SHATTER | EXPLODE_ON_HIT;
		
		return (0);
	}
	corpsetype = 1;
	explode wheel1 type SHATTER | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	explode guns type FALL | EXPLODE_ON_HIT;
	explode base type SHATTER;
}
