#include "STANDARD_COMMANDS_GPL.h" // Thank you Argh

piece  base, mantlet, barrel, flare;
piece exhaust, frontwheel, rearwheel, wheel1, wheel2, wheel3, wheel4, wheel5, tracks1, tracks2;

 
static-var  restore_delay, rock, mainHead, bMoving, treadnum, GunAiming, FearOk;


//how long the unit appears on the map after firing (in ms)
#define VISIBLE_PERIOD	5000

// Signal definitions
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // AA MG

// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 base
#define SMOKEPIECE3 mantlet
#define SMOKEPIECE4 mantlet

#include "SmokeUnit_GPL.h" // Thanks again to Argh

// definitions for wheels
#define WHEEL_SPIN		<600>
#define WHEEL_ACCEL		<150>

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for HitWeapId_S44
#define ARMOUR		6767
#include "HitWeapId_S44.h"

// definitions for turret movement
#define TURR_TRAVERSE	<10>
#define TURR_ELEVATE	<7>
#define AA_TRAVERSE		<225>
#define AA_ELEVATE		<150>

// definitions for weapons behaviour
#define RELOAD		4300 // time in milliseconds between shots
#define RECOIL		[-2] // distance to recoil the gun
#define RETURN_SPEED	[4] // speed at which the barrel returns


//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define XLARGE_MUZZLEFLASH 1024+8
#define XLARGE_MUZZLEDUST 1024+9
#define MuzzleBrakeSmoke 1024+10

treads() 
{ 
   while( TRUE ) 
   { 
        if(bMoving) 
           { 
              if(treadnum == 0) 
              {             
              hide tracks2; 
              show tracks1; 
              } 
            if(treadnum == 1) 
            { 
            hide tracks1; 
            show tracks2; 
			}
            treadnum = !treadnum; 
         } 
      sleep 90; 
   } 
}

Create()
{
	set ACTIVATION to 1;
	hide flare;
	// init vars
	rock = FALSE;
	// start continuous scripts
	start-script SmokeUnit_GPL();
	start-script treads();
}

StartMoving()
{
	bMoving = TRUE;
	set ACTIVATION to 1;
	spin frontwheel around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin rearwheel around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel1 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel2 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel3 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel4 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
 	spin wheel5 around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
}

StopMoving()
{
	bMoving = FALSE;
	set ACTIVATION to 0;
	stop-spin frontwheel around x-axis;
 	stop-spin rearwheel around x-axis;
	stop-spin wheel1 around x-axis;
 	stop-spin wheel2 around x-axis;
 	stop-spin wheel3 around x-axis;
 	stop-spin wheel4 around x-axis;
 	stop-spin wheel5 around x-axis;
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn barrel to x-axis <0.000000> speed <10>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = mantlet;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	mainHead = heading;
	turn mantlet to y-axis heading speed TURR_ELEVATE;
	turn mantlet to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn mantlet around y-axis;
	wait-for-turn mantlet around x-axis;
	
	start-script RestoreAfterDelay();
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	FearOk=1;
	emit-sfx XLARGE_MUZZLEFLASH from flare;
	emit-sfx XLARGE_MUZZLEDUST from flare;
	
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 200;
	move barrel to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	set ACTIVATION to 1;
	sleep VISIBLE_PERIOD;
	set ACTIVATION to 0;
	return 0;
}

AimFromWeapon3(piecenum) //Main gun HE fear
{
	piecenum = mantlet;
}

QueryWeapon3(piecenum)
{
	piecenum = flare;
}

AimWeapon3(heading, pitch)
{
	if (FearOk==1)
	{
	wait-for-turn mantlet around y-axis;
	return (1);
	}
return 0;
}

FireWeapon3()
{
FearOk=0;
return (0);
}

AimFromWeapon4(piecenum) //bulletproof effect 
{
	piecenum = base;
}

QueryWeapon4(piecenum)
{
	piecenum = base;
}

AimWeapon4(heading, pitch)
{
return (1);
}

FireWeapon4()
{
return (0);
}



AimFromWeapon5(piecenum) //fear shield
{
	piecenum = base;
}

QueryWeapon5(piecenum)
{
	piecenum = base;
}

AimWeapon5(heading, pitch)
{
return (1);
}

FireWeapon5()
{
return (0);
}


// TODO: make this pretty
Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
		explode wheel4 type SHATTER | EXPLODE_ON_HIT;
		explode wheel5 type SHATTER | EXPLODE_ON_HIT;
		return (0);
	}
	if( severity <= 250 )
	{
		corpsetype = 1;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
		explode wheel4 type SHATTER | EXPLODE_ON_HIT;
		explode wheel5 type SHATTER | EXPLODE_ON_HIT;
	}
	if(severity <= 1000)
	{
		corpsetype = 2;
		explode mantlet type EXPLODE_ON_HIT | FIRE | FALL;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wheel2 type SHATTER | EXPLODE_ON_HIT;
		explode wheel3 type SHATTER | EXPLODE_ON_HIT;
		explode wheel5 type SHATTER | EXPLODE_ON_HIT;
	}
	corpsetype = 2;
	explode mantlet type EXPLODE_ON_HIT | FIRE | FALL;
	explode barrel type SHATTER;
	explode frontwheel type SHATTER;
	explode rearwheel type SHATTER;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT;
	explode wheel3 type SHATTER | EXPLODE_ON_HIT;
	explode wheel5 type SHATTER | EXPLODE_ON_HIT;
}

