#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fuselage, wing1, wing2, wheel1, wheel2, propeller, blades, turret, barrel, flare;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

#define SMOKEPUFF_GPL_FX 		1024+0
#define MG_MUZZLEFLASH			1024+1
#define MG_SHELLCASINGS 		1024+2

#define SIG_BANK 				2

#define SMALL_TRACER 			2048+1

startengine()
{
	spin propeller around z-axis speed <800> accelerate <200>;
	sleep 400;
	spin propeller around z-axis speed <5000> accelerate <-5000>;
	sleep 200;
	spin propeller around z-axis speed <5000> accelerate <5000>;
	hide blades;
	set 1024 to 1;
}

stopengine()
{
	show blades;
	spin propeller around z-axis speed <800> accelerate <-400>;
	sleep 400;
	spin propeller around z-axis speed <50>;
	set 1024 to 0;
}

bankright()
{
	signal SIG_BANK;
	set-signal-mask SIG_BANK;
	turn fuselage to z-axis <-30> speed <30>;
	sleep 100;
	turn fuselage to z-axis <0> speed <30>;	
}
bankleft()
{
	signal SIG_BANK;
	set-signal-mask SIG_BANK;
	turn fuselage to z-axis <30> speed <30>;
	sleep 100;
	turn fuselage to z-axis <0> speed <30>;	
}

gearsup()
{
}

gearsdown()
{
}

activatescr()
{
}

deactivatescr()
{
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.054945> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.043956>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	set 1024 to 0;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = fuselage;
}

AimFromWeapon1(piecenum)//Defensive Machinegun
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimWeapon1(heading, pitch)
{
	turn turret to y-axis heading - <180> speed <200>;
	turn barrel to x-axis 0 + pitch speed <200>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	return (1);
}

FireWeapon1()
{
	emit-sfx SMALL_TRACER from flare;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx SMALL_TRACER from flare;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx SMALL_TRACER from flare;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	emit-sfx SMALL_TRACER from flare;
	emit-sfx MG_MUZZLEFLASH from flare;
	emit-sfx MG_SHELLCASINGS from turret;
	sleep 67;
	
	return (0);
}
Killed(severity, corpsetype)
{
	corpsetype = 1;
	explode base type BITMAPONLY | BITMAP1;
	explode fuselage type SHATTER;
	explode wing1 type EXPLODE_ON_HIT | FIRE | FALL;
	explode wheel1 type EXPLODE_ON_HIT | FIRE | FALL;
	explode wheel2 type EXPLODE_ON_HIT | FIRE | FALL;
}
