#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam, door;

static-var  Static_Var_3, Static_Var_4;

pickPlace(buildPlace)
{
if (buildPlace == 1)
{
move pad to x-axis [25] speed [4000];
}

if (buildPlace == 0)
{
move pad to x-axis [0] speed [4000];
}
}

activatescr()
{
	turn door to y-axis <130.000000> speed <50.000000>;
	sleep 13;
}

deactivatescr()
{
	turn door to y-axis <0.000000> speed <50.000000>;
	sleep 23;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{

  while (get BUILD_PERCENT_LEFT)
   {
    move base to y-axis 0 - ([0.6] * get BUILD_PERCENT_LEFT) now;
    sleep 10;
 	}
  move base to y-axis 0 now;
  
  
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}


AimFromWeapon1(piecenum)
{
	piecenum = base;
}

QueryWeapon1(piecenum)
{
	piecenum = base;
}

AimWeapon1(heading, pitch)
{
return(1);
}

FireWeapon1()
{
return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode base type SHATTER | EXPLODE_ON_HIT;
		explode door type FIRE | FALL | EXPLODE_ON_HIT;
		explode pad type FIRE | FALL | EXPLODE_ON_HIT;
		explode beam type FIRE | FALL | EXPLODE_ON_HIT;
		return (0);
	}
	corpsetype = 1;
	explode base type SHATTER | EXPLODE_ON_HIT;
	explode door type FIRE | FALL | EXPLODE_ON_HIT;
	explode pad type FIRE | FALL | EXPLODE_ON_HIT;
	explode beam type FIRE | FALL | EXPLODE_ON_HIT;
}
