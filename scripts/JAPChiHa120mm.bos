#include "constants.h" // Thank you Argh

piece	base, front_wheels, rear_wheels, mid_wheels1, mid_wheels2, mid_wheels3, mid_wheels4, mid_wheels5, mid_wheels6, support_wheels1, support_wheels2, support_wheels3,
		tracks,
		turret, sleeve, barrel, flare,
		bow_mg, bow_mg_flare,
		exhaust1, exhaust2;
 
static-var  restore_delay, rock, reloading, mainHead, bMoving, GunAiming, MGAiming, frontMGAimDone, treadnum;

// Signal definitions
#define SIG_MOVE	1
#define SIG_AIM		2 // Main Cannon
#define SIG_AIM_2	4 // Bow MG
#define SIG_AIM_3	8 // turret MG

// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 turret
#define SMOKEPIECE3 exhaust1
#define SMOKEPIECE4 exhaust2

#include "SmokeUnit_GPL.h" // Thanks again to Argh

//hiding FX emit points
#define FX_HIDE\
	hide flare;\
	hide bow_mg_flare;\

// definitions for RockUnit_Set
#define ROCK_SPEED	<60> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for turret movement
#define TURR_TRAVERSE	<15> // hand operated
#define TURR_ELEVATE	<7>
#define COAX_ARC		<3>
#define MG_TRAVERSE		<20>
#define MG_ELEVATE		<10>

// definitions for weapons behaviour
#define RELOAD		3200 // time in milliseconds between shots
#define RECOIL		[-1.0] // distance to recoil the gun
#define RETURN_SPEED	[5] // speed at which the barrel returns

// definitions for HitWeapId_S44
#define ARMOUR		4372
#include "HitWeapId_S44.h"

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define LARGE_MUZZLEFLASH 1024+8
#define LARGE_MUZZLEDUST 1024+9
#define MuzzleBrakeSmoke 1024+10

// tracers
#define SMALL_TRACER 	2048+3

#include "chiha.h"

treads() 
{ 
/*   while( TRUE ) 
   { 
        if(bMoving) 
           { 
              if(treadnum == 0) 
              {             
              hide tracks2; 
              show tracks1; 
              } 
            if(treadnum == 1) 
            { 
            hide tracks1; 
            show tracks2; 
			}
            treadnum = !treadnum; 
         } 
      sleep 90; 
   } */
}

Create()
{
	FX_HIDE
	// init vars
	rock = FALSE;
	reloading = FALSE;
	treadnum=0;
	frontMGAimDone = FALSE;
	// start continuous scripts
	start-script SmokeUnit_GPL();
	start-script treads();
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis 0 speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 speed TURR_ELEVATE;
	turn bow_mg to y-axis 0 speed MG_TRAVERSE;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, HE
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	GunAiming=1;
	mainHead = heading;
	turn turret to y-axis heading speed TURR_TRAVERSE;
	turn sleeve to x-axis 0 - pitch speed TURR_ELEVATE;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	
	start-script RestoreAfterDelay();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	GunAiming=0;
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	emit-sfx LARGE_MUZZLEFLASH from flare;
	emit-sfx LARGE_MUZZLEDUST from flare;
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 200;
	move barrel to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

// Weapon 2 - Bow MG
QueryWeapon2 (piecenum)
	{
	piecenum = bow_mg_flare;
	}

AimFromWeapon2 (piecenum)
	{
	piecenum = bow_mg;
	}

AimWeapon2(heading, pitch)
	{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	MGAiming=1;
	turn bow_mg to y-axis heading speed MG_TRAVERSE;
	wait-for-turn bow_mg around y-axis;
	
	start-script RestoreAfterDelay();
	MGAiming=0;
	return (1);
	}

FireWeapon2()
	{
	rock = FALSE;
	return(0);
	}

Shot2(foo)
{
	emit-sfx SMALL_TRACER from bow_mg_flare;
	emit-sfx MG_MUZZLEFLASH from bow_mg_flare;
}

AimFromWeapon3(piecenum) //bulletproof effect 
{
	piecenum = base;
}

QueryWeapon3(piecenum)
{
	piecenum = base;
}

AimWeapon3(heading, pitch)
{
	return (1);
}

FireWeapon3()
{
	return (0);
}

// TODO: make this pretty
Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned tank - no visual damage
		corpsetype = 1;
		return (0);
	}
	if( severity <= 250 )
	{
		// burning tank
		corpsetype = 2;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		return (0);
	}
	if(severity <= 1000)
	{
		// internal explosion!
		corpsetype = 3;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL;
		explode mid_wheels1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode mid_wheels2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode mid_wheels3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode mid_wheels4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode mid_wheels5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode mid_wheels6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	// OMGWTF direct asteroid hit!
	corpsetype = 4;
	explode turret type EXPLODE_ON_HIT | FIRE | FALL;
	explode base type SHATTER;
	explode sleeve type SHATTER;
	explode front_wheels type SHATTER;
	explode rear_wheels type SHATTER;
	explode mid_wheels1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mid_wheels2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mid_wheels3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mid_wheels4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mid_wheels5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mid_wheels6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (0);
}

