#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam, PillboxA, PillboxB, flare1, flare2, flare3, flare4, flare5, flare6;

static-var  Static_Var_1, Static_Var_3, Static_Var_4;

 // Signal definitions
#define SIG_AIM		2
#define SIG_AIM_2	4
#define SIG_AIM_3	8
#define SIG_AIM_4	16
#define SIG_AIM_5	32
#define SIG_AIM_6	64


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{

  while (get BUILD_PERCENT_LEFT)
   {
    move base to y-axis 0 - ([0.3] * get BUILD_PERCENT_LEFT) now;
    sleep 10;
 	}
  move base to y-axis 0 now;
  
  
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}


AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn flare1 to y-axis heading speed <200>;
	return (1);
}

QueryWeapon1(piecenum)
{
	piecenum = flare1;
}

AimFromWeapon1(piecenum)
{
	piecenum = PillboxA;
}



FireWeapon1()
{
	show flare1;
	sleep 25;
	hide flare1;
	sleep 25;
	show flare1;
	sleep 25;
	hide flare1;
	sleep 25;
	show flare1;
	sleep 25;
	hide flare1;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

QueryWeapon2(piecenum)
{
	piecenum = flare2;
}

AimFromWeapon2(piecenum)
{
	piecenum = PillboxA;
}

FireWeapon2()
{
	show flare2;
	sleep 25;
	hide flare2;
	sleep 25;
	show flare2;
	sleep 25;
	hide flare2;
	sleep 25;
	show flare2;
	sleep 25;
	hide flare2;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

QueryWeapon3(piecenum)
{
	piecenum = flare3;
}

AimFromWeapon3(piecenum)
{
	piecenum = PillboxA;
}

FireWeapon3()
{
	show flare3;
	sleep 25;
	hide flare3;
	sleep 25;
	show flare3;
	sleep 25;
	hide flare3;
	sleep 25;
	show flare3;
	sleep 25;
	hide flare3;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	return (1);
}

QueryWeapon4(piecenum)
{
	piecenum = flare4;
}

AimFromWeapon4(piecenum)
{
	piecenum = PillboxA;
}

FireWeapon4()
{
	show flare4;
	sleep 25;
	hide flare4;
	sleep 25;
	show flare4;
	sleep 25;
	hide flare4;
	sleep 25;
	show flare4;
	sleep 25;
	hide flare4;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	return (1);
}

QueryWeapon5(piecenum)
{
	piecenum = flare5;
}

AimFromWeapon5(piecenum)
{
	piecenum = PillboxB;
}

FireWeapon5()
{
	show flare5;
	sleep 25;
	hide flare5;
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	return (1);
}

QueryWeapon6(piecenum)
{
	piecenum = flare6;
}

AimFromWeapon6(piecenum)
{
	piecenum = base;
}

FireWeapon6()
{
	show flare6;
	sleep 25;
	hide flare6;
}
//
AimWeapon7(heading, pitch)
{
	return (1);
}

QueryWeapon7(piecenum)
{
	piecenum = base;
}

AimFromWeapon7(piecenum)
{
	piecenum = base;
}

FireWeapon7()
{
return 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
		explode base type SHATTER | EXPLODE_ON_HIT;
		explode flare1 type FIRE | FALL | EXPLODE_ON_HIT;
		explode flare2 type FIRE | FALL | EXPLODE_ON_HIT;
		explode flare3 type FIRE | FALL | EXPLODE_ON_HIT;
		explode flare4 type FIRE | FALL | EXPLODE_ON_HIT;
		explode flare5 type FIRE | FALL | EXPLODE_ON_HIT;
		explode flare6 type FIRE | FALL | EXPLODE_ON_HIT;
}
