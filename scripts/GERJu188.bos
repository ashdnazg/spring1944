#define TAK

#include "constants.h"

piece	base, hull, prop1, prop2, shassis, wheels, rear_wheel, turret, top_gun, top_flare,
		rear_gun_base, rear_gun, rear_flare, front_gun_base, front_gun, front_flare, door11, door12, door21, door22;

static-var  Static_Var_1, iFear;

#include "air_sharedDefs.h"

#define SMOKEPUFF_GPL_FX 1024+0
#define MG_SHELLCASINGS 1024+1
#define MG_MUZZLEFLASH	1024+2
#define XSMALL_MUZZLEFLASH	1024+3

#define SIG_BANK			4
#define SIG_FEARRECOVERY	8

#define SIG_AIM2			16
#define SIG_AIM3			32
#define SIG_AIM4			64

#define TURRET_TURN_SPEED	<30>
#define TURRET_PITCH_SPEED	<20>

#define BugOutLevel			90//% of health when plane ditches its bombs
//tracers
#define MEDIUM_TRACER 	2048+5
#define LARGE_TRACER 	2048+6

startengine()
{
	spin prop1 around z-axis speed <800> accelerate <200>;
	spin prop2 around z-axis speed <800> accelerate <200>;
	sleep 400;
	spin prop1 around z-axis speed <5000> accelerate <-5000>;
	spin prop2 around z-axis speed <-5000> accelerate <-5000>;
	sleep 200;
	spin prop1 around z-axis speed <5000> accelerate <5000>;
	spin prop2 around z-axis speed <-5000> accelerate <5000>;
	/*hide blades;*/
	set 1024 to 1;
}

stopengine()
{
	/*show blades;*/
	spin prop1 around z-axis speed <800> accelerate <-400>;
	spin prop2 around z-axis speed <-800> accelerate <-400>;
	sleep 400;
	spin prop1 around z-axis speed <50>;
	spin prop2 around z-axis speed <-50>;
	set 1024 to 0;
}

bankright()
{
	signal SIG_BANK;
	set-signal-mask SIG_BANK;
	turn hull to z-axis <-30> speed <30>;
	sleep 100;
	turn hull to z-axis <0> speed <30>;	
}

bankleft()
{
	signal SIG_BANK;
	set-signal-mask SIG_BANK;
	turn hull to z-axis <30> speed <30>;
	sleep 100;
	turn hull to z-axis <0> speed <30>;	
}

gearsup()
{
		show shassis;
		show wheels;
		turn shassis to x-axis <0> speed <30>;
}

gearsdown()
{
		turn shassis to x-axis <-90> speed <30>;
		wait-for-turn shassis around x-axis;
		hide shassis;
		hide wheels;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.054945> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.043956>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
}

InitTurrets()
{
	turn turret to y-axis <180> now;
	turn rear_gun_base to y-axis <180> now;
}

RestoreTurrets()
{
	set-signal-mask SIG_AIM2|SIG_AIM3|SIG_AIM4;
	sleep 2000;

	turn turret to y-axis <180> speed TURRET_TURN_SPEED;
	turn top_gun to x-axis 0 speed TURRET_PITCH_SPEED;

	turn rear_gun_base to y-axis <180> speed TURRET_TURN_SPEED;
	turn rear_gun to x-axis 0 speed TURRET_PITCH_SPEED;

	turn front_gun_base to y-axis 0 speed TURRET_TURN_SPEED;
	turn front_gun to y-axis 0 speed TURRET_PITCH_SPEED;
}

Create()
{
	Static_Var_1 = 0;
	SET STANDINGFIREORDERS to 1;
	start-script SmokeUnit();
	start-script InitTurrets();
	set 1024 to 0;
}

Activate()
{
	set ACTIVATION to 1;
}

Deactivate()
{
	set ACTIVATION to 0;
}

FearRecovery() 
{ 
signal SIG_FEARRECOVERY;
set-signal-mask SIG_FEARRECOVERY;
	
     while(iFear > 0) 
        { 
	        sleep RecoverRate; 
			iFear = iFear - RecoverConstant; 
        } 
	//start-script RestoreAfterCover();   
	return (1); 
}

HitByWeaponId(z,x,id,damage)
{	
	
	if (Id==701)
	{
	iFear = iFear + AAFear;
	if (iFear > FearLimit) iFear = FearLimit; // put this line AFTER increasing iFear var		
	start-script FearRecovery();
	return (100);
	}
	
	if ((get HEALTH) <= BugOutLevel && ((get WEAPON_RELOADSTATE (1)) < (get (GAME_FRAME)) + 1))
	{
	get WEAPON_PROJECTILE_SPEED (-1, 100);
	emit-sfx 2048+1 from base;
	var gameFrame;
	gameFrame = get GAME_FRAME;
	get WEAPON_RELOADSTATE (-1, (gameFrame+108000));
	}
	return (100); 
}

luaFunction(arg1)
{
 arg1 = iFear;
}


SweetSpot(piecenum)
{
	piecenum = hull;
}

AimFromWeapon1(piecenum) 
{
	piecenum = hull;
}

QueryWeapon1(piecenum)
{
	piecenum = hull;
}

AimWeapon1(heading, pitch)
{
//	if ((bombOk == 0) || (gears == 1)) return 0;
	return (1);
}

FireWeapon1()
{
	return (0);
}

// Weapon 2 - top turret (360 degree field of fire, but only top hemisphere)
AimFromWeapon2(piecenum) 
{
	piecenum = turret;
}

QueryWeapon2(piecenum)
{
	piecenum = top_flare;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret to y-axis heading speed TURRET_TURN_SPEED;
	turn top_gun to x-axis (0-pitch) speed TURRET_PITCH_SPEED;
	wait-for-turn turret around y-axis;
	wait-for-turn top_gun around x-axis;
	start-script RestoreTurrets();
	return (1);
}

FireWeapon2()
{
/*	emit-sfx MEDIUM_TRACER from mg1;
	emit-sfx MG_MUZZLEFLASH from mg1;
	emit-sfx MG_SHELLCASINGS from mg1;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from mg1;
	emit-sfx MG_SHELLCASINGS from mg1;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from mg1;
	emit-sfx MG_SHELLCASINGS from mg1;
	sleep 67;
	emit-sfx MEDIUM_TRACER from mg1;
	emit-sfx MG_MUZZLEFLASH from mg1;
	emit-sfx MG_SHELLCASINGS from mg1;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from mg1;
	emit-sfx MG_SHELLCASINGS from mg1;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from mg1;
	emit-sfx MG_SHELLCASINGS from mg1;
	return (0);*/
}

Shot2(foo)
{
	emit-sfx MEDIUM_TRACER from top_flare;
	emit-sfx MG_MUZZLEFLASH from top_flare;
	emit-sfx MG_SHELLCASINGS from turret;
}

// Fron gun - 90 degree cone, directed forward
AimFromWeapon3(piecenum)
{
	piecenum = front_gun_base;
}

QueryWeapon3(piecenum)
{
	piecenum = front_flare;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;

	turn front_gun_base to y-axis heading speed TURRET_TURN_SPEED;
	turn front_gun to x-axis (0-pitch) speed TURRET_PITCH_SPEED;
	wait-for-turn front_gun_base around y-axis;
	wait-for-turn front_gun around x-axis;
	start-script RestoreTurrets();
	return (1);
}

FireWeapon3()
{
	/*emit-sfx MG_MUZZLEFLASH from mg2;
	emit-sfx MG_SHELLCASINGS from mg2;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from mg2;
	emit-sfx MG_SHELLCASINGS from mg2;
	sleep 67;
	emit-sfx MEDIUM_TRACER from mg2;
	emit-sfx MG_MUZZLEFLASH from mg2;
	emit-sfx MG_SHELLCASINGS from mg2;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from mg2;
	emit-sfx MG_SHELLCASINGS from mg2;
	sleep 67;
	emit-sfx MG_MUZZLEFLASH from mg2;
	emit-sfx MG_SHELLCASINGS from mg2;
	sleep 67;
	emit-sfx MEDIUM_TRACER from mg2;
	emit-sfx MG_MUZZLEFLASH from mg2;
	emit-sfx MG_SHELLCASINGS from mg2;*/
	return (0);
}

Shot3(foo)
{
	emit-sfx MEDIUM_TRACER from front_flare;
	emit-sfx MG_MUZZLEFLASH from front_flare;
	emit-sfx MG_SHELLCASINGS from front_gun_base;
}

// Rear gun - 90 degree cone, pointed back
AimFromWeapon4(piecenum) //Coax fear 
{
	piecenum = rear_gun_base;
}

QueryWeapon4(piecenum)
{
	piecenum = rear_flare;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM4;
	set-signal-mask SIG_AIM4;
	turn rear_gun_base to y-axis heading speed TURRET_TURN_SPEED;
	turn rear_gun to x-axis (0-pitch) speed TURRET_PITCH_SPEED;
	wait-for-turn rear_gun_base around y-axis;
	wait-for-turn rear_gun around x-axis;
	start-script RestoreTurrets();
	return (1);
}

FireWeapon4()
{
/*	emit-sfx XSMALL_MUZZLEFLASH from cannon1;
	sleep 67;
	emit-sfx LARGE_TRACER from cannon1;
	emit-sfx XSMALL_MUZZLEFLASH from cannon1;
	sleep 67;
	emit-sfx XSMALL_MUZZLEFLASH from cannon1;
	sleep 67;*/
	return (0);
}

Shoot4(foo)
{
	emit-sfx MEDIUM_TRACER from rear_flare;
	emit-sfx MG_MUZZLEFLASH from rear_flare;
	emit-sfx MG_SHELLCASINGS from rear_gun_base;
}

Killed(severity, corpsetype)
{
	corpsetype = 1;
	explode hull type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode shassis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheels type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode prop1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode prop2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
}
