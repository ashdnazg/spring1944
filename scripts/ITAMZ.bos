#define TAK

piece base, turret_76, sleeve_76, barrel_76, flare_76,
	  turret_20_1, sleeve_20_1, barrel_20_1, flare_20_1,
	  turret_20_2, sleeve_20_2, barrel_20_2, flare_20_2,
	  turret, grabber, link,
	  flag1, flag2, flag3,
	  cover1, cover2, cover3, cover4, ramp,
	  prop1, prop2, prop3,
	  wake1, wake2, wake3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

#define LOAD_DIST			[125]

//********************Turret turn speeds
#define MAIN_TURRET_TURN	<15>
#define MAIN_TURRET_PITCH	<17>

#define AA20_TURRET_TURN		<45>
#define AA20_TURRET_PITCH		<45>

//*********************Recoil
#define MAIN_GUN_RECOIL			[0.8]
#define MAIN_GUN_RECOIL_SPEED	[10]
#define MAIN_GUN_BACK_SPEED		[0.2]

#define AA20_GUN_RECOIL			[0.4]
#define AA20_GUN_RECOIL_SPEED	[10]
#define AA20_GUN_BACK_SPEED		[0.5]

//********************Open anims
#define COVER_SIZE				[-10.16]
#define COVER_SPEED				COVER_SIZE
#define RAMP_ANGLE				<30>
#define RAMP_SPEED				<10>

//*********************Death anim
#define HULL_LIST_SPEED		<2>
#define HULL_LIST_ANGLE		<-5>

#define RESTORE_PERIOD		2500

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16
#define SIG_LOAD			32

#define SMOKEPIECE	base

// effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define XSMALL_MUZZLEFLASH 1024+5
#define XSMALL_MUZZLEDUST 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_MUZZLEFLASH 1024+3
#define SMALL_MUZZLEDUST 1024+4
#define MEDIUMLARGE_MUZZLEFLASH 1024+8
#define MEDIUMLARGE_MUZZLEDUST 1024+9

//********************Flag
#define FLAG_FLAP_PERIOD	500
#define FLAG_FLAP_SPEED		<30>
#define FLAG_FLAP_ANGLE		<15>

#include "constants.h"
#include "damageSmoke.h"
static-var					MaxSpeed, bRampOpen, bMoving, bTooFar, boom_len, boom_heading, boom_pitch, bAimAA1, bAimAA2;

FlagFlap()
{
	while(TRUE)
	{
		turn flag2 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis FLAG_FLAP_ANGLE speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;

		turn flag2 to y-axis FLAG_FLAP_ANGLE speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;
	}
}

InitTurrets()
//Pre-position turrets
{
	turn turret_76 to y-axis <180> now;
	turn turret_20_2 to y-axis <180> now;
	turn cover1 to x-axis <-0.5> now;
	move cover1 to y-axis [-0.5] now;
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

Create()
{
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	call-script InitTurrets();
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script FlagFlap();
	bAimAA1 = FALSE;
	bAimAA2 = FALSE;
}

//Transport stuff
OpenRamp()
{
	turn ramp to x-axis RAMP_ANGLE speed RAMP_SPEED;
	move cover1 to z-axis COVER_SIZE speed COVER_SPEED;
	wait-for-move cover1 along z-axis;
	hide cover1;
	move cover2 to z-axis COVER_SIZE speed COVER_SPEED;
	wait-for-move cover2 along z-axis;
	hide cover2;
	move cover3 to z-axis COVER_SIZE speed COVER_SPEED;
	wait-for-move cover3 along z-axis;
	hide cover3;
	move cover4 to z-axis COVER_SIZE speed COVER_SPEED;
	wait-for-move cover4 along z-axis;
	hide cover4;
	wait-for-turn ramp around x-axis;
}

CloseRamp()
{
	turn ramp to x-axis 0 speed RAMP_SPEED;
	show cover4;
	move cover4 to z-axis 0 speed COVER_SPEED;
	wait-for-move cover4 along z-axis;
	show cover3;
	move cover3 to z-axis 0 speed COVER_SPEED;
	wait-for-move cover3 along z-axis;
	show cover2;
	move cover2 to z-axis 0 speed COVER_SPEED;
	wait-for-move cover2 along z-axis;
	show cover1;
	move cover1 to z-axis 0 speed COVER_SPEED;
}

BoomCalc(posxz,posy)
{
	var dxz,dy,lenxz;

	dxz = get PIECE_XZ(turret) - posxz;
	dy = posy - get PIECE_Y(turret);
	lenxz = get XZ_HYPOT(dxz);

	boom_len = get HYPOT(lenxz,dy);
	boom_heading = get XZ_ATAN(dxz);
	boom_pitch = get ATAN(dy,lenxz);
	bTooFar = (boom_len > LOAD_DIST);
}

PositionLink(posxz,posy)
{
	turn turret to y-axis boom_heading now;
	turn grabber to x-axis 0-boom_pitch now;
	move grabber to z-axis boom_len now;
}

ReturnLink()
{
	turn turret to y-axis <0> now;
	turn grabber to x-axis <0> now;
	move grabber to z-axis [0] now;
}

TransportPickup(unitid, fromLua)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
	if ( fromLua != 1) {
		call-script OpenRamp();
    	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid));
		if( bTooFar )
		{
			return (FALSE);
		}
		set BUSY to 1;
	}
	attach-unit unitid to (0-1);
	if ( fromLua != 1) {
		sleep 500;
		set BUSY to 0;
		sleep 2500;
	}
}

TransportDrop(unitid, position)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
    call-script BoomCalc(position,get GROUND_HEIGHT(position));
	if( bTooFar )
	{
		return (1);
	}
	set BUSY to 1;
	call-script OpenRamp();
	attach-unit unitid to link;
	call-script PositionLink();
	sleep 50;
	drop-unit unitid;
	call-script ReturnLink();
	sleep 1000;
	set BUSY to 0;
	sleep 1500;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx SFXTYPE_WAKE1 from wake1;
		emit-sfx SFXTYPE_WAKE1 from wake2;
		emit-sfx SFXTYPE_WAKE1 from wake3;
		sleep 300;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script CloseRamp();
	start-script EmitWakes();
	bMoving = TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_DEATH;
	sleep RESTORE_PERIOD;
	turn turret_76 to y-axis <180> speed MAIN_TURRET_TURN;
	turn sleeve_76 to x-axis <0> speed MAIN_TURRET_PITCH;

	turn turret_20_1 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis <0> speed AA20_TURRET_PITCH;

	turn turret_20_2 to y-axis <180> speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis <0> speed AA20_TURRET_PITCH;
}

QueryWeapon1(piecenum)
{
	piecenum = flare_76;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret_76;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	turn turret_76 to y-axis heading speed MAIN_TURRET_TURN;
	turn flare_76 to x-axis (0-pitch) speed MAIN_TURRET_PITCH;
	wait-for-turn turret_76 around y-axis;
	wait-for-turn flare_76 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
	emit-sfx MEDIUMLARGE_MUZZLEFLASH from flare_76;
	emit-sfx MEDIUMLARGE_MUZZLEDUST from flare_76;

	move barrel_76 to z-axis (0-MAIN_GUN_RECOIL) speed MAIN_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_76 to z-axis [0] speed MAIN_GUN_BACK_SPEED;
}

QueryWeapon2(piecenum)
{
	piecenum = flare_20_1;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret_20_1;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	bAimAA1 = TRUE;
	turn turret_20_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_1 around y-axis;
	wait-for-turn sleeve_20_1 around x-axis;
	start-script RestoreTurret();
	bAimAA1 = FALSE;
	return (TRUE);
}

FireWeapon2()
{
	return;
}

Shot2(foo)
{
	emit-sfx SMALL_MUZZLEFLASH from flare_20_1;
	emit-sfx SMALL_MUZZLEDUST from flare_20_1;

	move barrel_20_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	wait-for-move barrel_20_1 along z-axis;
	move barrel_20_1 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

QueryWeapon3(piecenum)
{
	piecenum = flare_20_1;
}

AimFromWeapon3(piecenum)
{
	piecenum = turret_20_1;
}

AimWeapon3(heading, pitch)
{
	if (bAimAA1)
	{
		return FALSE;
	}
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	turn turret_20_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_1 around y-axis;
	wait-for-turn sleeve_20_1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon3()
{
	return;
}

Shot3(foo)
{
	emit-sfx SMALL_MUZZLEFLASH from flare_20_1;
	emit-sfx SMALL_MUZZLEDUST from flare_20_1;

	move barrel_20_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	wait-for-move barrel_20_1 along z-axis;
	move barrel_20_1 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

QueryWeapon4(piecenum)
{
	piecenum = flare_20_2;
}

AimFromWeapon4(piecenum)
{
	piecenum = turret_20_2;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	bAimAA2 = TRUE;
	turn turret_20_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_2 around y-axis;
	wait-for-turn sleeve_20_2 around x-axis;
	start-script RestoreTurret();
	bAimAA2 = FALSE;
	return (TRUE);
}

FireWeapon4()
{
	return;
}

Shot4(foo)
{
	emit-sfx SMALL_MUZZLEFLASH from flare_20_2;
	emit-sfx SMALL_MUZZLEDUST from flare_20_2;

	move barrel_20_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	wait-for-move barrel_20_2 along z-axis;
	move barrel_20_2 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

QueryWeapon5(piecenum)
{
	piecenum = flare_20_2;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret_20_2;
}

AimWeapon5(heading, pitch)
{
	if (bAimAA2)
	{
		return FALSE;
	}
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	turn turret_20_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_2 around y-axis;
	wait-for-turn sleeve_20_2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon5()
{
	return;
}

Shot5(foo)
{
	emit-sfx SMALL_MUZZLEFLASH from flare_20_2;
	emit-sfx SMALL_MUZZLEDUST from flare_20_2;

	move barrel_20_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	wait-for-move barrel_20_2 along z-axis;
	move barrel_20_2 to z-axis 0 speed AA20_GUN_BACK_SPEED;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<300)
	{
		corpsetype = 1;
		turn base to x-axis HULL_LIST_ANGLE speed HULL_LIST_SPEED;
		wait-for-turn base around x-axis;
		return (TRUE);
	}
	corpsetype = 2;
	explode base type		SHATTER;
	explode turret_76 type	FALL|EXPLODE_ON_HIT|FIRE;
	return (TRUE);
}