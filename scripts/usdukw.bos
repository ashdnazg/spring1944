#define TAK			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, load_shoulder, load_arm, wheel1, wheel2, wheel3, wheel4, wheel5, wheel6, prop, wake;
 
static-var bGun, bMoving, bFloating, WaterSpeed, LandSpeed;

// Signal definitions
#define SIG_AIM				2
#define INFANTRY			412876 // this is 65536 * s3o model radius

#define PROP_SPIN			<1200>
#define FLOAT_DEPTH			[-3]

#include "amphib.h"

// Transport script courtesy of Zwzsg's script for Spring SW imptroopc
TransportPickup(unitid)
{
	if( get UNIT_ALLIED(unitid) == 1) { // only pick up allied units
			set BUSY to 1;
			if( get UNIT_HEIGHT (unitid) == INFANTRY) 
			{ 
			  attach-unit unitid to 0 - 1; // hide infantry models
			}
			if( get UNIT_HEIGHT (unitid) != INFANTRY && !bGun) // only load one gun
			{ 
			  attach-unit unitid to 0 - 1; // hide gun on DUKW, towing on water is silly
			  bGun = 1;
			}
			set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	set BUSY to 1;
	// just dump guns off where they are
	if( get UNIT_HEIGHT (unitid) != INFANTRY) 
	{ 
		bGun = 0; // don't drop here, let DUKW unload gun properly as it is not towed
	}
	// turn shoulder to face the drop off point
	turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
	attach-unit unitid to load_arm;
	// move arm toward drop off point
	move load_arm to z-axis get XZ_HYPOT(get PIECE_XZ(base) - position) now; // new line
	// sleep for at least a frame (so unit is not dropped by attach-unit)
	sleep 50;
	//get PRINT (unitid, position / 65536, position & 65535);
	drop-unit unitid;
	move load_arm to z-axis 0 now;
	set BUSY to 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	bMoving = TRUE;
	spin wheel1 around x-axis speed <350.082418>;
	spin wheel2 around x-axis speed <350.082418>;
	spin wheel3 around x-axis speed <350.082418>;
	spin wheel4 around x-axis speed <350.082418>;
	spin wheel5 around x-axis speed <350.082418>;
	spin wheel6 around x-axis speed <350.082418>;
	if(bFloating)
	{
		spin prop around z-axis speed PROP_SPIN;
	}
}

StopMoving()
{
	bMoving = FALSE;
	stop-spin wheel1 around x-axis decelerate <100.000000>;
	stop-spin wheel2 around x-axis decelerate <100.000000>;
	stop-spin wheel3 around x-axis decelerate <100.000000>;
	stop-spin wheel4 around x-axis decelerate <100.000000>;
	stop-spin wheel5 around x-axis decelerate <100.000000>;
	stop-spin wheel6 around x-axis decelerate <100.000000>;
	stop-spin prop around z-axis;
}

Create()
{
	bGun = 0;
	bFloating = FALSE;
	bMoving = FALSE;
	LandSpeed = get MAX_SPEED;
	WaterSpeed = LandSpeed / 50; // land speed: 50 mph, water speed: 6 mph
	WaterSpeed = WaterSpeed * 6;
	start-script SmokeUnit();
	start-script WaterCheck();
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 999 )
	{
		if (get GROUND_WATER_HEIGHT(get PIECE_XZ(base))<=FLOAT_DEPTH)
		{
			corpsetype = 2;
		}
		else
		{
			corpsetype = 1;
		}
		return (0);
	}
	corpsetype = 1;
	explode body type SHATTER;
}
