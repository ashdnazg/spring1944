#include "constants.h" // Thank you Argh

piece	base, spares, front_wheels, rear_wheels,
		roller1, roller2, roller3, roller4,
		support_wheel1, support_wheel2, support_wheel3,
		tracks,
		sleeve, barrel, flare;
 
static-var  restore_delay, rock, aim2, reloading, bMoving, GunAiming, treadnum;

// Signal definitions
#define SIG_MOVE	1
#define SIG_AIM		2 // Main Cannon

// definitions for SmokeUnit_GPL
#define SMOKEPIECE1	base
#define SMOKEPIECE2 barrel
#define SMOKEPIECE3	base
#define SMOKEPIECE4	base

#include "SmokeUnit_GPL.h" // Thanks again to Argh

//hiding FX emit points
#define FX_HIDE\
	hide flare;\

// definitions for RockUnit_Set
#define ROCK_SPEED	<50> // heavier units should rock less
#define RESTORE_SPEED	<20>
#define ROCKVAR		rock

#include "RockUnit_Set.h"

// definitions for wheels
#define WHEEL_SPIN		<600>
#define WHEEL_ACCEL		<150>

// definitions for turret movement
#define GUN_TRAVERSE	<10>
#define GUN_ELEVATE		<7>

// definitions for weapons behaviour
#define RELOAD		4800 // time in milliseconds between shots
#define RECOIL		[-1] // distance to recoil the gun
#define RETURN_SPEED	[5] // speed at which the barrel returns

// definitions for HitWeapId_S44
#define ARMOUR		4372
#include "HitWeapId_S44.h"

//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define placeholder_EFFECT05 1024+5
#define placeholder_EFFECT06 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_MUZZLEFLASH 1024+8
#define SMALL_MUZZLEDUST 1024+9
#define MuzzleBrakeSmoke 1024+10


treads() 
{ 
/*   while( TRUE ) 
   { 
        if(bMoving) 
           { 
              if(treadnum == 0) 
              {             
              hide tracks2; 
              show tracks1; 
              } 
            if(treadnum == 1) 
            { 
            hide tracks1; 
            show tracks2; 
			}
            treadnum = !treadnum; 
         } 
      sleep 90; 
   } */
}

Create()
{
	FX_HIDE
	// init vars
	rock = FALSE;
	aim2 = FALSE;
	reloading = FALSE;
	treadnum=0;
	// start continuous scripts
	start-script SmokeUnit_GPL();
	start-script treads();
}

StartMoving()
{
	signal SIG_MOVE;
	bMoving = TRUE;
	spin front_wheels around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
	spin rear_wheels around x-axis speed WHEEL_SPIN accelerate WHEEL_ACCEL;
	spin roller1 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller2 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller3 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin roller4 around x-axis speed WHEEL_SPIN*2 accelerate WHEEL_ACCEL*2;
	spin support_wheel1 around x-axis speed WHEEL_SPIN*3 accelerate WHEEL_ACCEL*3;
	spin support_wheel1 around x-axis speed WHEEL_SPIN*3 accelerate WHEEL_ACCEL*3;
	spin support_wheel1 around x-axis speed WHEEL_SPIN*3 accelerate WHEEL_ACCEL*3;
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	stop-spin front_wheels around x-axis;
 	stop-spin rear_wheels around x-axis;
	stop-spin roller1 around x-axis;
	stop-spin roller2 around x-axis;
	stop-spin roller3 around x-axis;
	stop-spin roller4 around x-axis;
	stop-spin support_wheel1 around x-axis;
	stop-spin support_wheel1 around x-axis;
	stop-spin support_wheel1 around x-axis;
}

SetMaxReloadTime(longestReloadTime)
{
	restore_delay = longestReloadTime * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn sleeve to y-axis <0.000000> speed GUN_TRAVERSE;
	turn barrel to x-axis <0.000000> speed GUN_ELEVATE;
}

Reload()
{
	reloading = TRUE;
	sleep RELOAD;
	reloading = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

// Weapon 1 - Main cannon, AP
QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = sleeve;
}

AimWeapon1(heading, pitch)
{
	if (aim2) return 0; // don't aim weap1 if aiming HEAP
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	GunAiming=1;
	turn sleeve to y-axis heading speed GUN_TRAVERSE;
	turn barrel to x-axis 0 - pitch speed GUN_ELEVATE;
	wait-for-turn sleeve around y-axis;
	wait-for-turn barrel around x-axis;
	
	start-script RestoreAfterDelay();
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	GunAiming=0;
	return 1;
}

FireWeapon1()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	emit-sfx SMALL_MUZZLEFLASH from flare;
	emit-sfx SMALL_MUZZLEDUST from flare;
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 200;
	move barrel to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

// Weapon 2 - Main cannon, AP
QueryWeapon2(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = sleeve;
}

AimWeapon2(heading, pitch)
{
	aim2 = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn sleeve to y-axis heading speed GUN_TRAVERSE;
	turn barrel to x-axis 0 - pitch speed GUN_ELEVATE;
	wait-for-turn sleeve around y-axis;
	wait-for-turn barrel around x-axis;
	
	start-script RestoreAfterDelay();
	aim2 = FALSE;
	if (reloading) return 0; // aim first, then pause if the shot cannot fire
	return 1;
}

FireWeapon2()
{
	rock = TRUE; // firing a heavy weapon
	
	// TODO: Add to SFX
	// Do SFX
	//emit-sfx 1  from flare;
	emit-sfx SMALL_MUZZLEFLASH from flare;
	emit-sfx SMALL_MUZZLEDUST from flare;
	// barrel recoil
	move barrel to z-axis RECOIL now;
	sleep 200;
	move barrel to z-axis 0 speed RETURN_SPEED;
	
	rock = FALSE;
	start-script Reload(); // start reload timer after firing
	return 0;
}

AimFromWeapon3(piecenum) //bulletproof effect 
{
	piecenum = base;
}

QueryWeapon3(piecenum)
{
	piecenum = base;
}

AimWeapon3(heading, pitch)
{
return (1);
}

FireWeapon3()
{
return (0);
}

// TODO: make this pretty
Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		// abandoned tank - no visual damage
		corpsetype = 1;
		return (0);
	}
	if( severity <= 250 )
	{
		// burning tank
		corpsetype = 2;
		explode tracks type SHATTER;
		return (0);
	}
	if(severity <= 1000)
	{
		// internal explosion!
		corpsetype = 3;
		explode roller1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roller4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	// OMGWTF direct asteroid hit!
	corpsetype = 4;
	explode base type SHATTER;
	explode barrel type SHATTER;
	explode front_wheels type SHATTER;
	explode rear_wheels type SHATTER;
	explode roller1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roller4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (0);
}

